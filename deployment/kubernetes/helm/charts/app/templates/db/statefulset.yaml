{{- if not .Values.bitnamipostgresql.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: &name postgresql
  namespace: {{ .Values.namespace }}
  labels:
    app: *name
    cluster-name: &cluster_name postgresql-cluster
spec:
  replicas: {{ .Values.app.db.replicaCount }}
  selector:
    matchLabels:
      app: *name
      cluster-name: &cluster_name postgresql-cluster
  serviceName: *name
  template:
    metadata:
      labels:
        app: *name
        cluster-name: *cluster_name
        zone: db
    spec:
      serviceAccountName: {{ .Release.Name }}-postgresmaster
      containers:
      - name: database
        image: {{ .Values.app.db.image }}
        imagePullPolicy: Always
        ports:
        - containerPort: 8008
          protocol: TCP
          name: ctl
        - containerPort: 64000
          protocol: TCP
          name: postgresql
        env:
        - name: PGSSL
          value: {{ .Values.app.db.pgssl | quote }}
        - name: PGDATABASE
          value: {{ .Values.app.db.dbname | quote }}
        - name: PGINIT
          value: "/srv/postgresql/home/postgres/dbscripts/custom/updateScript.sh"
        - name: PGDBADM
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.db.secrets.name }}
              key: postgres.dbadm.username
        - name: PGDBADMPW
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.db.secrets.name }}
              key: postgres.dbadm.password

### now mandatory
        - name: PGBACKUPUSER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.db.secrets.name }}
              key: postgres.backupuser.username
        - name: PGBACKUPUSERPW
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.db.secrets.name }}
              key: postgres.backupuser.password

#### new
        - name: PATRONIUSERPW
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.db.secrets.name }}
              key: postgres.patroniuser.password

### new but inherited
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBERNETES_LABELS
          value: '{app: postgresql, cluster-name: postgresql-cluster}'
        - name: CLUSTER_SCOPE
          value: *cluster_name
        volumeMounts:
        - name: *name
          mountPath: "/srv/postgresql/volume"
        - name: {{ .Release.Name }}-schemainit-datainit-sqlint
          mountPath: /srv/postgresql/home/postgres/dbscripts/custom
      securityContext:
        fsGroup: 987
      terminationGracePeriodSeconds: 0
      volumes:
      - name: {{ .Release.Name }}-schemainit-datainit-sqlint
        configMap:
          name: {{ .Release.Name }}-schemainit-datainit-sqlint
          items:
          - key: "schema-data.sql"
            path: "schema-data.sql"
          - key: "dashboard-data-dump.sql"
            path: "dashboard-data-dump.sql"
          - key: "schema-creation.sql"
            path: "schema-creation.sql"
          - key: "dashboard-schema-creation.sql"
            path: "dashboard-schema-creation.sql"
          - key: "updateScript.sh"
            path: "updateScript.sh"
          - key: "airflow-db.sql"
            path: "airflow-db.sql"
  volumeClaimTemplates:
  - metadata:
      name: *name
    spec:
      storageClassName:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
{{ end }}