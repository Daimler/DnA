apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
  namespace: {{ .Values.namespace }}
data:
  nginx.conf: |
        worker_processes  1;
        error_log         "/opt/bitnami/nginx/logs/error.log";
        pid               "/opt/bitnami/nginx/tmp/nginx.pid";

        events {
          worker_connections  1024;
        }

        http {
            include       /opt/bitnami/nginx/conf/mime.types;
            default_type  application/octet-stream;
            log_format    main '$remote_addr - $remote_user [$time_local] '
                              '"$request" $status  $body_bytes_sent "$http_referer" '
                              '"$http_user_agent" "$http_x_forwarded_for"';
            access_log    "/opt/bitnami/nginx/logs/access.log";
            add_header    X-Frame-Options SAMEORIGIN;
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

            client_body_temp_path  "/opt/bitnami/nginx/tmp/client_body" 1 2;
            proxy_temp_path        "/opt/bitnami/nginx/tmp/proxy" 1 2;
            fastcgi_temp_path      "/opt/bitnami/nginx/tmp/fastcgi" 1 2;
            scgi_temp_path         "/opt/bitnami/nginx/tmp/scgi" 1 2;
            uwsgi_temp_path        "/opt/bitnami/nginx/tmp/uwsgi" 1 2;

            sendfile           on;
            tcp_nopush         on;
            tcp_nodelay        off;
            gzip               on;
            gzip_http_version  1.0;
            gzip_comp_level    2;
            gzip_proxied       any;
            gzip_types         text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            keepalive_timeout  65;
            ssl_protocols      TLSv1 TLSv1.1 TLSv1.2;

            include  "/opt/bitnami/nginx/conf/server_blocks/*.conf";

          server {
            listen  3000;
            add_header Referrer-Policy 'strict-origin-when-cross-origin';

            resolver kube-dns.kube-system.svc.cluster.local valid=10s;

            set $backend "http://{{ .Release.Name }}-backend-service.{{ .Values.namespace }}.svc.cluster.local:80";

            set $jupy_server {{ .Values.app.ngnixconf.jupyserver | quote }};

            set $grafana_server {{ .Values.app.ngnixconf.grafanaserver | quote }};

            #set $avscan_server {{ .Values.app.ngnixconf.avscanserver | quote }};

            set $avscan_mgw_server {{ .Values.app.ngnixconf.avscanmgwserver | quote }};

            set $airflow_server {{ .Values.app.ngnixconf.airflowserver | quote }};

            set $naas_server {{ .Values.app.ngnixconf.naasserver | quote }};
            
            set $dashboard_server {{ .Values.app.ngnixconf.dashboard | quote }};

            root /usr/share/nginx/html;
            index index.htm index.html;
            try_files $uri $uri/ /index.html;

            location / {
              add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
              add_header Cache-Control "no-store, no-cache, must-revalidate";
              ssi on;
            }
            location ^~ /notebooks {
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-NginX-Proxy true;
              proxy_pass $jupy_server;
              proxy_ssl_session_reuse off;
              proxy_set_header Host $http_host;
              proxy_redirect off;
            }
            location ^~ /pipelines {
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-NginX-Proxy true;
              proxy_pass $airflow_server;
              proxy_ssl_session_reuse off;
              proxy_set_header Host $http_host;
              proxy_redirect off;
            }
            # For One-API
            location ^~ /malware-scan {
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-NginX-Proxy true;
              proxy_pass $avscan_mgw_server;
              proxy_ssl_session_reuse off;
              proxy_set_header Host $http_host;
              proxy_redirect off;
            }
            location ^~ /naas {
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-NginX-Proxy true;
              proxy_pass $naas_server;
              proxy_ssl_session_reuse off;
              proxy_set_header Host $http_host;
              proxy_redirect off;
            }
            location ^~ /dashboards {
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-NginX-Proxy true;
              proxy_pass $dashboard_server;
              proxy_ssl_session_reuse off;
              proxy_set_header Host $http_host;
              proxy_redirect off;
            }
            location ^~ /grafana {
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-NginX-Proxy true;
              proxy_pass $grafana_server;
              proxy_ssl_session_reuse off;
              proxy_set_header Host $http_host;
              proxy_redirect off;
            }
            location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc|ttf|eot|woff)$ {
              expires 1M;
              access_log "/opt/bitnami/nginx/logs/static.log";
              add_header Cache-Control "public";
            }

            location ~ ^.+\..+$ {
                try_files $uri =404;
            }

            location ^~ /api {
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-NginX-Proxy true;
              proxy_pass $backend;
              proxy_ssl_session_reuse off;
              proxy_set_header Host $http_host;
              proxy_redirect off;
            }

            location /inject-environment {
              default_type application/json;
              return 200 '<script type="text/javascript">window["INJECTED_ENVIRONMENT"]={OIDC_DISABLED: false};</script>';
            }
          }
        }