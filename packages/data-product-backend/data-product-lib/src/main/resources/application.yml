spring:
  mvc.pathmatch.matching-strategy: ant_path_matcher
  application:
    name: data-product-service
    version: 1.1.7
  flyway:
    enabled: ${FLYWAY_ENABLED:true}
    baseline-on-migrate: ${FLYWAY_BASELINE_ON_MIGRATE:true}
    baselineVersion: ${FLYWAY_BASELINEVERSION:0}
    schemas: ${FLYWAY_SCHEMA:public}
    encoding: ISO-8859-1
    
  jpa:
    database: POSTGRESQL
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        temp:
          use_jdbc_metadata_defaults: false
    hibernate:
      ddl-auto: none

  datasource:
    hikari:
      connection-timeout: 4000
    platform: postgres
    url: ${API_DB_URL:jdbc:postgresql://localhost:5432/data_product}
    username: ${API_DB_USER:XXXX_user}
    password: ${API_DB_PASS:XXXX_pass}
    driverClassName: org.postgresql.Driver

  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 5MB
      
  graphql:
      path: /api/minified

  kafka:
    producer:
    properties:
      ssl:
        truststore:
          location: ${TRUSTSTORE_PATH:/XXXX/XXXX/truststore.jks}
          password: ${TRUSTSTORE_PASSWORD:XXXX}
          type: PKCS12
        keystore:
          location: ${KEYSTORE_PATH:/XXXX/XXXX/keystore.p12}
          password: ${KEYSTORE_PASSWORD:XXXX}
          type: PKCS12
      security:
          protocol: SSL  
  cloud:
    stream:
      default-binder: kafka
      kafka:
        binder:
          brokers: ${NAAS_BROKER:localhost:9092}
          
kafka:
  centralTopic:
    name: dnaCentralEventTopic              
    
dna:
  uri: ${DNA_URI:XXXXXX}
  
dataproduct:
  base:
    url: ${DATAPRODUCT_BASE_URL:XXXXXX}
  refreshdb: ${DATAPRODUCT_REFRESH_DB:false}

datatransfer:
  base:
    url: ${DATATRANSFER_BASE_URL:XXXXXX}
  refreshdb: ${DATATRANSFER_REFRESH_DB:false}

xapikeydetails:
  key: ${XPATH_VALUE:XXXX}
  header: ${XPATH_HEADER:XXXX}

dashboard:
  uri: ${REPORTS_BASE_URL:XXXXXXX}

server:
  port: 7184

#Cors Filter origin Domains  
allowedCorsOriginPatternUrl: ${CORS_ORIGIN_URL:http://*}

 

      
swagger.headers.authorization.token: ${SWAGGER_HEADER_AUTH:XXXXXX}
management.endpoints.web.exposure.include: loggers,health
management.endpoint.loggers.enabled: true
management.endpoint.health.probes.enabled: true
management.endpoint.health.show-details: always

planningit.defaultlimit: 50

logging:
  service:
    environment: ${LOGGING_ENVIRONMENT:DEV}
    path: ${LOGGING_PATH:/var/log}
  level:
    com:
      daimler:
        data: INFO
    org.springframework.boot.autoconfigure.logging: INFO
    org:
      springframework:
        web:
          client:
            RestTemplate: INFO
      graphql:
        servlet: ERROR
