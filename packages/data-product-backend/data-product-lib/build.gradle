/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.1/userguide/building_java_projects.html
 */

buildscript {
    ext {
        springBootVersion = "2.7.0"
        releaseVersion = "1.0.0"
    }
    repositories {
        mavenLocal()
        mavenCentral()
		gradlePluginPortal()
		maven {
		  url "https://plugins.gradle.org/m2/"
		}
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:2.18.2")
		classpath("org.apache.maven.plugins:maven-dependency-plugin:3.1.2")
    }

}


plugins {
    // the plugins DSL is replacing apply plugin over time for Java-plugins. It is therefore favoured over the legacy "apply plugin:" approach
    id "java"
    id "eclipse"
}

apply plugin: "io.spring.dependency-management"
apply plugin: "org.springframework.boot"
apply plugin: "maven-publish"
apply plugin: "org.hidetake.swagger.generator"

repositories {
        mavenLocal()
        mavenCentral()
		gradlePluginPortal()
		maven {
		  url "https://plugins.gradle.org/m2/"
		}
}

group 'com.daimler.data'
version = releaseVersion

sourceCompatibility = 1.17
targetCompatibility = 1.17
tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

//__________________________________________________________//
//_____________________ SWAGGER CONFIGURATION ______________//

swaggerSources {

    datacompliance {
        def datacomplianceyaml = "${rootDir}/data-product-lib/src/main/resources/api/DataCompliance.yaml"
        def datacomplianceJson = "${rootDir}/data-product-lib/src/main/resources/api/DataCompliance.json"
        inputFile = file(datacomplianceyaml)

        def ignoreFile = "${rootDir}/data-product-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(datacomplianceJson)
            rawOptions = ['--ignore-file-override', ignoreFile]
            components = ['models', 'apis']
        }
    }
    
    datacomplianceAudit {
        def datacomplianceAudityaml = "${rootDir}/data-product-lib/src/main/resources/api/DataComplianceAudit.yaml"
        def datacomplianceAuditJson = "${rootDir}/data-product-lib/src/main/resources/api/DataComplianceAudit.json"
        inputFile = file(datacomplianceAudityaml)

        def ignoreFile = "${rootDir}/data-product-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(datacomplianceAuditJson)
            rawOptions = ['--ignore-file-override', ignoreFile]
            components = ['models', 'apis']
        }
    }
    
    entityid {
        def entityidyaml = "${rootDir}/data-product-lib/src/main/resources/api/EntityId.yaml"
        def entityidJson = "${rootDir}/data-product-lib/src/main/resources/api/EntityId.json"
        inputFile = file(entityidyaml)

        def ignoreFile = "${rootDir}/data-product-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(entityidJson)
            rawOptions = ['--ignore-file-override', ignoreFile]
            components = ['models', 'apis']
        }
    }  
    
    datatransfer {
        def datatransferyaml = "${rootDir}/data-product-lib/src/main/resources/api/DataTransfer.yaml"
        def datatransferJson = "${rootDir}/data-product-lib/src/main/resources/api/DataTransfer.json"
        inputFile = file(datatransferyaml)

        def ignoreFile = "${rootDir}/data-product-lib/src/main/resources/api/.swagger-codegen-ignore"

        code {
            language = 'spring'
            configFile = file(datatransferJson)
            rawOptions = ['--ignore-file-override', ignoreFile]
            components = ['models', 'apis']
        }
    }   
    
    department {
        def departmentyaml = "${rootDir}/data-product-lib/src/main/resources/api/Department.yaml"
        def departmentJson = "${rootDir}/data-product-lib/src/main/resources/api/Department.json"
        inputFile = file(departmentyaml)
        def ignoreFile = "${rootDir}/data-product-lib/src/main/resources/api/.swagger-codegen-ignore"
        code {
            language = 'spring'
            configFile = file(departmentJson)
            rawOptions = ['--ignore-file-override', ignoreFile]
            components = ['models', 'apis']
        }
    }  
    
    classification {
        def classificationYaml = "${rootDir}/data-product-lib/src/main/resources/api/Classification.yaml"
        def classificationJson = "${rootDir}/data-product-lib/src/main/resources/api/Classification.json"
        inputFile = file(classificationYaml)
        def ignoreFile = "${rootDir}/data-product-lib/src/main/resources/api/.swagger-codegen-ignore"
        code {
            language = 'spring'
            configFile = file(classificationJson)
            rawOptions = ['--ignore-file-override', ignoreFile]
            components = ['models', 'apis']
           }
      } 
      
    legalbasis {
        def legalbasisYaml = "${rootDir}/data-product-lib/src/main/resources/api/LegalBasis.yaml"
        def legalbasisJson = "${rootDir}/data-product-lib/src/main/resources/api/LegalBasis.json"
        inputFile = file(legalbasisYaml)
        def ignoreFile = "${rootDir}/data-product-lib/src/main/resources/api/.swagger-codegen-ignore"
        code {
            language = 'spring'
            configFile = file(legalbasisJson)
            rawOptions = ['--ignore-file-override', ignoreFile]
            components = ['models', 'apis']
           }
      }   
      
      
      planningit {
        def palnningitYaml = "${rootDir}/data-product-lib/src/main/resources/api/PlanningIT.yaml"
        def palnningitJson = "${rootDir}/data-product-lib/src/main/resources/api/PlanningIT.json"
        inputFile = file(palnningitYaml)
        def ignoreFile = "${rootDir}/data-product-lib/src/main/resources/api/.swagger-codegen-ignore"
        code {
            language = 'spring'
            configFile = file(palnningitJson)
            rawOptions = ['--ignore-file-override', ignoreFile]
            components = ['models', 'apis']
           }
      }               
        
}


compileJava {
    dependsOn processResources
    dependsOn swaggerSources.datacompliance.code
    source "${swaggerSources.datacompliance.code.outputDir}/src/main/java" 
    dependsOn swaggerSources.datacomplianceAudit.code
    source "${swaggerSources.datacomplianceAudit.code.outputDir}/src/main/java"
    dependsOn swaggerSources.entityid.code
    source "${swaggerSources.entityid.code.outputDir}/src/main/java"  
    dependsOn swaggerSources.datatransfer.code
    source "${swaggerSources.datatransfer.code.outputDir}/src/main/java" 
    dependsOn swaggerSources.department.code
    source "${swaggerSources.department.code.outputDir}/src/main/java"  
    dependsOn swaggerSources.classification.code
    source "${swaggerSources.classification.code.outputDir}/src/main/java"  
    dependsOn swaggerSources.legalbasis.code
    source "${swaggerSources.legalbasis.code.outputDir}/src/main/java"
    dependsOn swaggerSources.planningit.code
    source "${swaggerSources.planningit.code.outputDir}/src/main/java"                
}

sourceSets {
    unitTest {
        java { srcDir 'src/test/groovy' }
        resources { srcDir 'src/test/resources' }
        compileClasspath += sourceSets.main.runtimeClasspath
    }
    main {
    	  java { srcDirs += "${swaggerSources.datacompliance.code.outputDir}/src/main/java" }
    	  java { srcDirs += "${swaggerSources.datacomplianceAudit.code.outputDir}/src/main/java" }
    	  java { srcDirs += "${swaggerSources.entityid.code.outputDir}/src/main/java" }
    	  java { srcDirs += "${swaggerSources.datatransfer.code.outputDir}/src/main/java" }
    	  java { srcDirs += "${swaggerSources.department.code.outputDir}/src/main/java" }
    	  java { srcDirs += "${swaggerSources.classification.code.outputDir}/src/main/java"}
    	  java { srcDirs += "${swaggerSources.legalbasis.code.outputDir}/src/main/java"}
    	  java { srcDirs += "${swaggerSources.planningit.code.outputDir}/src/main/java"}
    }
}


dependencies {
	
	implementation group: 'org.yaml', name: 'snakeyaml', version: '1.30'
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-stream', version: '3.1.4'
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-stream-binder-kafka', version: '3.1.4'

    implementation group: 'com.graphql-java', name: 'graphql-spring-boot-starter', version: '5.0.2'
    
	implementation (group: 'com.graphql-java', name: 'graphql-java-tools', version: '5.2.4'){
        exclude (group: 'com.fasterxml.jackson.core')
    }
    	
    implementation group: 'com.graphql-java', name: 'graphql-java-extended-scalars', version: '1.0'
    
	implementation group: 'org.flywaydb', name: 'flyway-core', version: '8.5.13'
	
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.5.0'

    implementation group: 'com.vladmihalcea', name: 'hibernate-types-52', version: '2.9.2'

    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.20'
    
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.4.0'
    implementation group: 'org.json', name: 'json', version: '20190722'

    implementation('ch.qos.logback:logback-classic:1.2.3')

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.30'
    implementation group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.30'
    implementation group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.30'

    implementation('ch.qos.logback:logback-core:1.2.3')
    
    implementation 'io.swagger:swagger-annotations:1.6.2'

    swaggerCodegen 'io.swagger:swagger-codegen-cli:2.4.20'

    implementation group: 'cglib', name: 'cglib-nodep', version: '3.3.0'
    
    implementation('org.springframework.boot:spring-boot-starter-web')

	implementation('org.apache.tomcat.embed:tomcat-embed-jasper:10.0.5')

    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '3.0.0'
	
    implementation('io.springfox:springfox-swagger-ui:2.9.2')
    
    implementation group: 'org.codehaus.mojo', name: 'animal-sniffer-annotations', version: '1.20'
    
    implementation group: 'org.antlr', name: 'antlr4-runtime', version: '4.9.2'

    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
	
	implementation('org.springframework.boot:spring-boot-starter-aop')
	
    implementation 'org.projectlombok:lombok:1.18.22'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    
    implementation 'org.springframework.boot:spring-boot-starter-validation'
	
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.7'
	implementation group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '3.0.2'

    implementation group: 'net.minidev', name: 'json-smart', version: '2.4.7'
	
	 implementation("com.squareup.okhttp3:okhttp") {
        version {
            strictly '4.9.0'
        }
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
