spring:
  application:
    name: dna-backend-service
  flyway:
    enabled: ${FLYWAY_ENABLED:true}
    baseline-on-migrate: ${FLYWAY_BASELINE_ON_MIGRATE:true}
    baselineVersion: ${FLYWAY_BASELINEVERSION:0}
    schemas: ${FLYWAY_SCHEMA:public}
    
  jpa:
    database: POSTGRESQL
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        temp:
          use_jdbc_metadata_defaults: false
    hibernate:
      ddl-auto: none

  datasource:
    hikari:
      connection-timeout: 4000
    platform: postgres
    url: ${API_DB_URL:jdbc:postgresql://localhost:5432/db}
    username: ${API_DB_USER:XXXX_user}
    password: ${API_DB_PASS:XXXX_pass}
    driverClassName: org.postgresql.Driver

  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 5MB
      
  cloud:
    stream:
      default-binder: kafka
      kafka:
        binder:
          brokers: ${NAAS_BROKER:localhost:9092}
    vault:
      host: ${VAULT_HOST:localhost}
      port: ${VAULT_PORT:8200}
      scheme: ${VAULT_SCHEME:http}
      authentication: ${VAULT_AUTHENTICATION:TOKEN}
      token: ${VAULT_TOKEN:00000000-0000-0000-0000-000000000000}
      mountpath: ${VAULT_MOUNTPATH:secret}
      vaultpath: ${VAULT_PATH:dnambc/avscan}
      kv:
       enabled: true    


kafka:
  centralTopic:
    name: dnaCentralEventTopic
#DNA feature configuration allowed or not(true/false) 
dna:
  feature:
      jupyternotebook: ${JUPYTER_NOTEBOOK:false}
      dataiku: ${DATAIKU:false}
      itsmm: ${ITSMM:false}
      attachmentMalwareScan: ${ATTACHMENT_MALWARE_SCAN:false}
      internal-user-enabled: ${DRD_INTERNAL_USER_ENABLED:false}
  user:
    role: ${USER_ROLE:Admin}
      
graphql:
  servlet:
    mapping: /api/minified
    enabled: true
    corsEnabled: true
#environment: ${ENV:local}

server:
  port: 7171

#Cors Filter origin Domains  
allowedCorsOriginPatternUrl: ${CORS_ORIGIN_URL:http://*}





oidc:
  provider: ${OIDC_PROVIDER:OKTA}
  token:
    issuer: ${OIDC_ISSUER:xxxxx}
    introspection:
      url: ${OIDC_TOKEN_INTROSPECTION_URL:xxxxx}
    revocation:
      url: ${OIDC_TOKEN_REVOCATION_URL:xxxxx}
  userinfo:
    url: ${OIDC_USER_INFO_URL:xxxxx}
  disabled: ${OIDC_DISABLED:true}
  clientId: ${OIDC_CLIENT_ID:xxxxx}
  clientSecret: ${OIDC_CLIENT_SECRET:xxxxx}

jwt:
  secret:
    key: ${JWT_SECRET_KEY:xxxxxx}
    byPassUrl: ${BYPASS_JWT_AUTHENTICATION:/api/login;/api/verifyLogin;/api/itsmmgame;/api/task-data;/api/warmup-data;/api/subscription/validate;/api/notification-preferences}
    tokenExpiry: ${JWT_TOKEN_EXPIRY_TIME_IN_MIN:90}

drd:
  #DEV
  request-url: ${INTERNAL_USER_REQUEST_URL:xxxxx}
  certificate-file: ${INTERNAL_USER_CERT_FILE:xxxxx}
  certificate-pass: ${INTERNAL_USER_CERT_PASS:xxxxx}


task:
  delete:
    inactive-solutions-duration: ${INACTIVE_SOLUTION_DURATION_YRS:2} #years to check before deleting

jupyternotebook:
 baseuri: ${JUPYTER_NOTEBOOK_BASEURI:xxxxx}
 token: ${JUPYTER_NOTEBOOK_TOKEN:xxxxx}
 
storage:
  endpointurl: ${S3_EP_URL:xxxxxx}
  accesskey: ${S3_ACCESS_KEY:xxxxx}
  secretkey: ${S3_SECRET_KEY:xxxxx}
  bucketname: ${S3_BUCKET_NAME:xxxxx}
  maxParallelUploads: ${S3_MAX_PARALLEL_UPLOADTHREADS:20}
  minFileSize: ${S3_MIN_FILESIZE:1024}
  maxFileSize: ${S3_MAX_FILESIZE:5242880}


# Matomo Configuration
matomo:
  tracking: false
  siteId: ${MATOMO_SITE_ID:1}
  hostUrl: ${MATOMO_HOST_URL:xxxxx}

  
dataiku:
  apacCorpdir: ${APAC_CORPDIR:xxxxx}
  emeaCorpdir: ${EMEA_CORPDIR:xxxxx}
  projectsUriPath: ${DATAIKU_PROJECTS_URI_PATH:xxxxx}
  userRoleUriPath: ${DATAIKU_USER_ROLE_URI_PATH:xxxxx}
  projectPermissionUriPath: ${DATAIKU_PERMISSION_URI_PATH:xxxxx}
  production:
    uri: ${DATAIKU_PROD_URI:xxxxx}
    apiKey: ${DATAIKU_PROD_API_KEY:xxxxx}
    adminGroup: ${DATAIKU_PROD_ADMIN_GROUP:xxxxx}
  training:
    uri: ${DATAIKU_TRAINING_URI:xxxxx}
    apiKey: ${DATAIKU_TRAINING_API_KEY:xxxxx}
    adminGroup: ${DATAIKU_TRAINING_ADMIN_GROUP:xxxxx} 
    
dashboard:
  uri: ${DASHBOARD_URI:xxxxx}       
  
avscan:
  uri: ${AVSCAN_URI:xxxxx}
  appid: ${AVSCAN_APP_ID:xxxxx}
  apiKey: ${AVSCAN_API_KEY:xxxxx} 

swagger.headers.authorization.token: ${SWAGGER_HEADER_AUTH:XXXXXX}
management.endpoints.web.exposure.include: loggers,health
management.endpoint.loggers.enabled: true
management.endpoint.health.probes.enabled: true
management.endpoint.health.show-details: always


logging:
  service:
    environment: ${LOGGING_ENVIRONMENT:DEV}
    path: ${LOGGING_PATH:/var/log}
  level:
    com:
      daimler:
        data:
          application: INFO
          controller.ItsmmGameController: DEBUG
    org.springframework.boot.autoconfigure.logging: INFO
    com.daimler.data.controller.ItsmmGameController: DEBUG
    org:
      springframework:
        web:
          client:
            RestTemplate: INFO
      hibernate:
        type:
          descriptor:
            sql: ERROR
      graphql:
        servlet: ERROR
