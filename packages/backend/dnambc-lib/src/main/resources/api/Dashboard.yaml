# LICENSE START
# 
# MIT License
# 
# Copyright (c) 2019 Daimler TSS GmbH
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# 
# LICENSE END 
#
#  
#-----------------------------------------------------------------------------------------------------
#  **
#  ** File Name  : Dashboard.yaml
#  **
#  ** Module     : core
#  ** 

#  -------------------------------------------------------------------------------------------------------
#
#  CHANGE HISTORY
#
#  Created By         :  KURAHU
#
#  Bug Number         :  
#  Changed By         :  
#  Change Description :  
#  Change On          :  
#  Search String      :  
#  
#  -------------------------------------------------------------------------------------------------------
  

swagger: "2.0"
info:
 version: "1.0.0"
 title: "core dashboard Service"
host: "localhost:7171"
basePath: "/api/1.0"
tags:
 - name: "dashboard"
   description: "This service is used for dashboard related operations."

schemes:
- "https"

paths:

# path to get count of solution using DnA Notebook
#
#  supported http methods GET 
#
# path example ../notebook/solutions

 /dashboard/notebook/solutioncount:
   get:
    tags:
    - "dashboard"
    summary: "Get count of solutions using DnA Notebook."
    description:  "Get count of solutions using DnA Notebook with given filter."
    operationId: "getNotebookSolutionCount" 
    parameters:
        - name: published
          in: query
          description: Filtering solutions based on publish state. Draft or published, values true or false
          required: false
          type: boolean
        - name: location
          in: query
          description: List of IDs of locations of solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: division
          in: query
          description: List of IDs of divisions and subdivisions under each division of solutions. Example [{1,[2,3]},{2,[1]},{3,[4,5]}]
          required: false
          type: string
        - name: phase
          in: query
          description: List of IDs of current phase of solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: dataVolume
          in: query
          description: List of IDs of dataVolume of dataSources for solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: projectstatus
          in: query
          description: ID of current project status of solutions, Example 1
          required: false
          type: string
        - name: useCaseType
          in: query
          description: ID of useCaseType of solutions. 1.MyBookmarks or 2.MySolutions , Example 1
          required: false
          type: string
          enum: [1, 2]
        - name: searchTerm
          in: query
          description: searchTerm to filter solutions. SearchTerm is comma seperated search keywords which are used to search Tags and ProductName of solutions. Example "BAT, java"
          required: false
          type: string
        - name: tags
          in: query
          description: tags to filter solutions. tags is comma seperated search keywords which are used to search Tags and ProductName of solutions. Example "BAT, java"
          required: false
          type: string       
    responses:
      200:
       description: "Returns message of success or failure."
       schema:
         $ref: "#/definitions/SolCountWidgetResponseVO"
      400:
       description: "Bad request"
      401:
       description: "Request does not have sufficient credentials."
      403:
       description: "Request is not authorized."
      404:
       description: "Invalid id, record not found."
      500:
       description: "Internal error"
     
# path to get count of Solutions
#
#  supported http methods GET 
#
# path example ../dashboard/solutioncount

 /dashboard/solutioncount:
   get:
    tags:
    - "dashboard"
    summary: "Get count of solutions."
    description:  "Get count of solutions using DnA Notebook with given filter."
    operationId: "getSolutionCount" 
    parameters:
        - name: published
          in: query
          description: Filtering solutions based on publish state. Draft or published, values true or false
          required: false
          type: boolean
        - name: location
          in: query
          description: List of IDs of locations of solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: division
          in: query
          description: List of IDs of divisions and subdivisions under each division of solutions. Example [{1,[2,3]},{2,[1]},{3,[4,5]}]
          required: false
          type: string
        - name: phase
          in: query
          description: List of IDs of current phase of solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: dataVolume
          in: query
          description: List of IDs of dataVolume of dataSources for solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: projectstatus
          in: query
          description: ID of current project status of solutions, Example 1
          required: false
          type: string
        - name: useCaseType
          in: query
          description: ID of useCaseType of solutions. 1.MyBookmarks or 2.MySolutions , Example 1
          required: false
          type: string
          enum: [1, 2]
        - name: searchTerm
          in: query
          description: searchTerm to filter solutions. SearchTerm is comma seperated search keywords which are used to search Tags and ProductName of solutions. Example "BAT, java"
          required: false
          type: string
        - name: tags
          in: query
          description: tags to filter solutions. tags is comma seperated search keywords which are used to search Tags and ProductName of solutions. Example "BAT, java"
          required: false
          type: string       
    responses:
      200:
       description: "Returns message of success or failure."
       schema:
         $ref: "#/definitions/SolCountWidgetResponseVO"
      400:
       description: "Bad request"
      401:
       description: "Request does not have sufficient credentials."
      403:
       description: "Request is not authorized."
      404:
       description: "Invalid id, record not found."
      500:
       description: "Internal error"     
     
# path to get milestones of Solutions
#
#  supported http methods GET 
#
# path example ../dashboard/solutioncount

 /dashboard/milestones:
   get:
    tags:
    - "dashboard"
    summary: "Get milestones."
    description:  "Get milestones of solution with given filter."
    operationId: "getMilestones" 
    parameters:
        - name: published
          in: query
          description: Filtering solutions based on publish state. Draft or published, values true or false
          required: false
          type: boolean
        - name: location
          in: query
          description: List of IDs of locations of solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: division
          in: query
          description: List of IDs of divisions and subdivisions under each division of solutions. Example [{1,[2,3]},{2,[1]},{3,[4,5]}]
          required: false
          type: string
        - name: phase
          in: query
          description: List of IDs of current phase of solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: dataVolume
          in: query
          description: List of IDs of dataVolume of dataSources for solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: projectstatus
          in: query
          description: ID of current project status of solutions, Example 1
          required: false
          type: string
        - name: useCaseType
          in: query
          description: ID of useCaseType of solutions. 1.MyBookmarks or 2.MySolutions , Example 1
          required: false
          type: string
          enum: [1, 2]
        - name: searchTerm
          in: query
          description: searchTerm to filter solutions. SearchTerm is comma seperated search keywords which are used to search Tags and ProductName of solutions. Example "BAT, java"
          required: false
          type: string
        - name: tags
          in: query
          description: tags to filter solutions. tags is comma seperated search keywords which are used to search Tags and ProductName of solutions. Example "BAT, java"
          required: false
          type: string       
    responses:
      200:
       description: "Returns message of success or failure."
       schema:
         $ref: "#/definitions/SolMilestoneWidgetResponseVO"
      400:
       description: "Bad request"
      401:
       description: "Request does not have sufficient credentials."
      403:
       description: "Request is not authorized."
      404:
       description: "Invalid id, record not found."
      500:
       description: "Internal error"      
     
# path to get datasources of Solutions
#
#  supported http methods GET 
#
# path example ../dashboard/datasources

 /dashboard/datasources:
   get:
    tags:
    - "dashboard"
    summary: "Get datasources."
    description:  "Get datasources of solution with given filter."
    operationId: "getDatasources" 
    parameters:
        - name: published
          in: query
          description: Filtering solutions based on publish state. Draft or published, values true or false
          required: false
          type: boolean
        - name: location
          in: query
          description: List of IDs of locations of solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: division
          in: query
          description: List of IDs of divisions and subdivisions under each division of solutions. Example [{1,[2,3]},{2,[1]},{3,[4,5]}]
          required: false
          type: string
        - name: phase
          in: query
          description: List of IDs of current phase of solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: dataVolume
          in: query
          description: List of IDs of dataVolume of dataSources for solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: projectstatus
          in: query
          description: ID of current project status of solutions, Example 1
          required: false
          type: string
        - name: useCaseType
          in: query
          description: ID of useCaseType of solutions. 1.MyBookmarks or 2.MySolutions , Example 1
          required: false
          type: string
          enum: [1, 2]
        - name: searchTerm
          in: query
          description: searchTerm to filter solutions. SearchTerm is comma seperated search keywords which are used to search Tags and ProductName of solutions. Example "BAT, java"
          required: false
          type: string
        - name: tags
          in: query
          description: tags to filter solutions. tags is comma seperated search keywords which are used to search Tags and ProductName of solutions. Example "BAT, java"
          required: false
          type: string       
    responses:
      200:
       description: "Returns message of success or failure."
       schema:
         $ref: "#/definitions/SolDSWidgetResponseVO"
      400:
       description: "Bad request."
      401:
       description: "Request does not have sufficient credentials."
      403:
       description: "Request is not authorized."
      404:
       description: "Invalid id, record not found."
      500:
       description: "Internal error."           
     
# path to get locations of Solutions
#
#  supported http methods GET 
#
# path example ../dashboard/locations

 /dashboard/locations:
   get:
    tags:
    - "dashboard"
    summary: "Get locations."
    description:  "Get locations of solution with given filter."
    operationId: "getLocations" 
    parameters:
        - name: published
          in: query
          description: Filtering solutions based on publish state. Draft or published, values true or false
          required: false
          type: boolean
        - name: location
          in: query
          description: List of IDs of locations of solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: division
          in: query
          description: List of IDs of divisions and subdivisions under each division of solutions. Example [{1,[2,3]},{2,[1]},{3,[4,5]}]
          required: false
          type: string
        - name: phase
          in: query
          description: List of IDs of current phase of solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: dataVolume
          in: query
          description: List of IDs of dataVolume of dataSources for solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: projectstatus
          in: query
          description: ID of current project status of solutions, Example 1
          required: false
          type: string
        - name: useCaseType
          in: query
          description: ID of useCaseType of solutions. 1.MyBookmarks or 2.MySolutions , Example 1
          required: false
          type: string
          enum: [1, 2]
        - name: searchTerm
          in: query
          description: searchTerm to filter solutions. SearchTerm is comma seperated search keywords which are used to search Tags and ProductName of solutions. Example "BAT, java"
          required: false
          type: string
        - name: tags
          in: query
          description: tags to filter solutions. tags is comma seperated search keywords which are used to search Tags and ProductName of solutions. Example "BAT, java"
          required: false
          type: string       
    responses:
      200:
       description: "Returns message of success or failure."
       schema:
         $ref: "#/definitions/SolLocWidgetResponseVO"
      400:
       description: "Bad request."
      401:
       description: "Request does not have sufficient credentials."
      403:
       description: "Request is not authorized."
      404:
       description: "Invalid id, record not found."
      500:
       description: "Internal error."     
     
# path to get Digital Value details of Solutions
#
#  supported http methods GET 
#
# path example ../dashboard/digitalvalue

 /dashboard/digitalvalue:
   get:
    tags:
    - "dashboard"
    summary: "Get Digital values."
    description:  "Get Digital Value details of solution with given filter."
    operationId: "getDigitalValueDetails" 
    parameters:
        - name: published
          in: query
          description: Filtering solutions based on publish state. Draft or published, values true or false
          required: false
          type: boolean
        - name: location
          in: query
          description: List of IDs of locations of solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: division
          in: query
          description: List of IDs of divisions and subdivisions under each division of solutions. Example [{1,[2,3]},{2,[1]},{3,[4,5]}]
          required: false
          type: string
        - name: phase
          in: query
          description: List of IDs of current phase of solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: dataVolume
          in: query
          description: List of IDs of dataVolume of dataSources for solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: projectstatus
          in: query
          description: ID of current project status of solutions, Example 1
          required: false
          type: string
        - name: useCaseType
          in: query
          description: ID of useCaseType of solutions. 1.MyBookmarks or 2.MySolutions , Example 1
          required: false
          type: string
          enum: [1, 2]
        - name: searchTerm
          in: query
          description: searchTerm to filter solutions. SearchTerm is comma seperated search keywords which are used to search Tags and ProductName of solutions. Example "BAT, java"
          required: false
          type: string
        - name: tags
          in: query
          description: tags to filter solutions. tags is comma seperated search keywords which are used to search Tags and ProductName of solutions. Example "BAT, java"
          required: false
          type: string       
    responses:
      200:
       description: "Returns message of success or failure."
       schema:
         $ref: "#/definitions/SolDigitalValueWidgetResponseVO"
      400:
       description: "Bad request."
      401:
       description: "Request does not have sufficient credentials."
      403:
       description: "Request is not authorized."
      404:
       description: "Invalid id, record not found."
      500:
       description: "Internal error."          
       
# path to get Data Value details of Solutions
#
#  supported http methods GET 
#
# path example ../dashboard/datavalue

 /dashboard/datavalue:
   get:
    tags:
    - "dashboard"
    summary: "Get Data values."
    description:  "Get Data Value details of solution with given filter."
    operationId: "getDataValueDetails" 
    parameters:
        - name: published
          in: query
          description: Filtering solutions based on publish state. Draft or published, values true or false
          required: false
          type: boolean
        - name: location
          in: query
          description: List of IDs of locations of solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: division
          in: query
          description: List of IDs of divisions and subdivisions under each division of solutions. Example [{1,[2,3]},{2,[1]},{3,[4,5]}]
          required: false
          type: string
        - name: phase
          in: query
          description: List of IDs of current phase of solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: dataVolume
          in: query
          description: List of IDs of dataVolume of dataSources for solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: projectstatus
          in: query
          description: ID of current project status of solutions, Example 1
          required: false
          type: string
        - name: useCaseType
          in: query
          description: ID of useCaseType of solutions. 1.MyBookmarks or 2.MySolutions , Example 1
          required: false
          type: string
          enum: [1, 2]
        - name: searchTerm
          in: query
          description: searchTerm to filter solutions. SearchTerm is comma seperated search keywords which are used to search Tags and ProductName of solutions. Example "BAT, java"
          required: false
          type: string
        - name: tags
          in: query
          description: tags to filter solutions. tags is comma seperated search keywords which are used to search Tags and ProductName of solutions. Example "BAT, java"
          required: false
          type: string       
    responses:
      200:
       description: "Returns message of success or failure."
       schema:
         $ref: "#/definitions/SolDataValueWidgetResponseVO"
      400:
       description: "Bad request."
      401:
       description: "Request does not have sufficient credentials."
      403:
       description: "Request is not authorized."
      404:
       description: "Invalid id, record not found."
      500:
       description: "Internal error."                 
     
# path to get Digital Value details year wise
#
#  supported http methods GET 
#
# path example ../dashboard/digitalvalueyearly

 /dashboard/digitalvaluesummary:
   get:
    tags:
    - "dashboard"
    summary: "Get summary of Digital values."
    description:  "Get Digital Value summary of solution with given filter."
    operationId: "getDigitalValuesummary" 
    parameters:
        - name: published
          in: query
          description: Filtering solutions based on publish state. Draft or published, values true or false
          required: false
          type: boolean
        - name: location
          in: query
          description: List of IDs of locations of solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: division
          in: query
          description: List of IDs of divisions and subdivisions under each division of solutions. Example [{1,[2,3]},{2,[1]},{3,[4,5]}]
          required: false
          type: string
        - name: phase
          in: query
          description: List of IDs of current phase of solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: dataVolume
          in: query
          description: List of IDs of dataVolume of dataSources for solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: projectstatus
          in: query
          description: ID of current project status of solutions, Example 1
          required: false
          type: string
        - name: useCaseType
          in: query
          description: ID of useCaseType of solutions. 1.MyBookmarks or 2.MySolutions , Example 1
          required: false
          type: string
          enum: [1, 2]
        - name: searchTerm
          in: query
          description: searchTerm to filter solutions. SearchTerm is comma seperated search keywords which are used to search Tags and ProductName of solutions. Example "BAT, java"
          required: false
          type: string
        - name: tags
          in: query
          description: tags to filter solutions. tags is comma seperated search keywords which are used to search Tags and ProductName of solutions. Example "BAT, java"
          required: false
          type: string       
    responses:
      200:
       description: "Returns message of success or failure."
       schema:
         $ref: "#/definitions/SolDigitalValuesummaryResponseVO"
      400:
       description: "Bad request."
      401:
       description: "Request does not have sufficient credentials."
      403:
       description: "Request is not authorized."
      404:
       description: "Invalid id, record not found."
      500:
       description: "Internal error." 
       
# path to get Digital Value details year wise
#
#  supported http methods GET 
#
# path example ../dashboard/datavalueyearly

 /dashboard/datavaluesummary:
   get:
    tags:
    - "dashboard"
    summary: "Get summary of Data values."
    description:  "Get Data Value summary of solution with given filter."
    operationId: "getDataValuesummary" 
    parameters:
        - name: published
          in: query
          description: Filtering solutions based on publish state. Draft or published, values true or false
          required: false
          type: boolean
        - name: location
          in: query
          description: List of IDs of locations of solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: division
          in: query
          description: List of IDs of divisions and subdivisions under each division of solutions. Example [{1,[2,3]},{2,[1]},{3,[4,5]}]
          required: false
          type: string
        - name: phase
          in: query
          description: List of IDs of current phase of solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: dataVolume
          in: query
          description: List of IDs of dataVolume of dataSources for solutions, seperated by comma. Example 1,2,3
          required: false
          type: string
        - name: projectstatus
          in: query
          description: ID of current project status of solutions, Example 1
          required: false
          type: string
        - name: useCaseType
          in: query
          description: ID of useCaseType of solutions. 1.MyBookmarks or 2.MySolutions , Example 1
          required: false
          type: string
          enum: [1, 2]
        - name: searchTerm
          in: query
          description: searchTerm to filter solutions. SearchTerm is comma seperated search keywords which are used to search Tags and ProductName of solutions. Example "BAT, java"
          required: false
          type: string
        - name: tags
          in: query
          description: tags to filter solutions. tags is comma seperated search keywords which are used to search Tags and ProductName of solutions. Example "BAT, java"
          required: false
          type: string       
    responses:
      200:
       description: "Returns message of success or failure."
       schema:
         $ref: "#/definitions/SolDataValueSummaryResponseVO"
      400:
       description: "Bad request."
      401:
       description: "Request does not have sufficient credentials."
      403:
       description: "Request is not authorized."
      404:
       description: "Invalid id, record not found."
      500:
       description: "Internal error."           
     
definitions:
 SolCountWidgetResponseVO:
   type: object
   properties:
      totalCount:
        type: integer
        description: "Total Record Count"     
      errors:
        type: array
        items:
          $ref: "#/definitions/MessageDescription"
      warnings:
        type: array
        items:
          $ref: "#/definitions/MessageDescription"    

 SolLocWidgetResponseVO:
   type: object
   properties:
      locations:
        type: array
        items:
          $ref: "#/definitions/LocationWidgetVO"       
      errors:
        type: array
        items:
          $ref: "#/definitions/MessageDescription"
      warnings:
        type: array
        items:
          $ref: "#/definitions/MessageDescription"

 LocationWidgetVO:
    type: object
    properties:
      location:
        $ref: "#/definitions/SolutionLocationVO"
      solutionCount:
        type: integer
        format: int64
        description: "Total Solution Count"     


 SolDSWidgetResponseVO:
   type: object
   properties:
      totalCount:
        type: integer
        description: "Total Record Count"
      dataSources:
        type: array
        items:
          $ref: "#/definitions/DatasourceWidgetVO"        
      errors:
        type: array
        items:
          $ref: "#/definitions/MessageDescription"
      warnings:
        type: array
        items:
          $ref: "#/definitions/MessageDescription"
        
 DatasourceWidgetVO:
    type: object
    properties:
      dataVolume:
        $ref: "#/definitions/DataVolumeVO"
      solutionCount:
        type: integer
        format: int64
        description: "Total Solution Count"        

 SolMilestoneWidgetResponseVO:
   type: object
   properties:
      milestones:
        type: array
        items:
          $ref: "#/definitions/MilestoneWidgetVO"        
      errors:
        type: array
        items:
          $ref: "#/definitions/MessageDescription"
      warnings:
        type: array
        items:
          $ref: "#/definitions/MessageDescription"

 MilestoneWidgetVO:
    type: object
    properties:
      phase:
        $ref: "#/definitions/SolutionPhaseVO"
      solutionCount:
        type: integer
        format: int64
        description: "Total Solution Count"
        
 SolDigitalValueWidgetResponseVO:
   type: object
   properties:
#      digitalValues:
#        type: array
#        items:
#          $ref: "#/definitions/DigitalValueWidgetVO"
      totalDigitalValue:
        type: number
        description: "Total digital value."            
      errors:
        type: array
        items:
          $ref: "#/definitions/MessageDescription"
      warnings:
        type: array
        items:
          $ref: "#/definitions/MessageDescription"
          
 SolDataValueWidgetResponseVO:
   type: object
   properties:
#      digitalValues:
#        type: array
#        items:
#          $ref: "#/definitions/DigitalValueWidgetVO"
      totalDataValueSavings:
        type: number
        description: "Total data value for savings."
      totalDataValueRevenue:
        type: number
        description: "Total data value for revenue."              
      errors:
        type: array
        items:
          $ref: "#/definitions/MessageDescription"
      warnings:
        type: array
        items:
          $ref: "#/definitions/MessageDescription"          

 DigitalValueWidgetVO:
    type: object
    properties:
      digitalValue:
        $ref: "#/definitions/CalculatedDigitalValueVO"
      solutionCount:
        type: integer
        format: int64
        description: "Total Solution Count"        

 SolDigitalValuesummaryResponseVO:
   type: object
   properties:
      solDigitalValuesummary:
        type: array
        items:
          $ref: "#/definitions/SolDigitalValuesummaryVO"
      errors:
        type: array
        items:
          $ref: "#/definitions/MessageDescription"
      warnings:
        type: array
        items:
          $ref: "#/definitions/MessageDescription"

 SolDigitalValuesummaryVO:
  type: object
  properties:
    year:
      type: number
      description: "Year."
    digitalValueVO:
      type: array
      items:
        $ref: "#/definitions/DigitalValueVO"

 DigitalValueVO:
  type: object
  properties:
    solutionId:
      type: string
      description: "Solution Id."
    productName:
      type: string
      description: "Product name"  
    digitalValue:
      type: number
      description: "Digital value at 100%."
      
 SolDataValueSummaryResponseVO:
   type: object
   properties:
      solDataValueSummary:
        type: array
        items:
          $ref: "#/definitions/SolDataValueSummaryVO"
      errors:
        type: array
        items:
          $ref: "#/definitions/MessageDescription"
      warnings:
        type: array
        items:
          $ref: "#/definitions/MessageDescription"  
      
 SolDataValueSummaryVO:
  type: object
  properties:
    year:
      type: number
      description: "Year."
    dataValueVO:
      type: array
      items:
        $ref: "#/definitions/DataValueVO"     
      
 DataValueVO:
  type: object
  properties:
    solutionId:
      type: string
      description: "Solution Id."
    productName:
      type: string
      description: "Product name"  
    savings:
      type: number
      description: "Savings value for all the data value solutions"
    revenue:
      type: number
      description: "Revenue value for all the data value solutions"     

 BindingResult:
  type: object
  
 GenericMessage:
  type: object
  properties:
    success:
      type: string
    errors:
      type: array
      items: 
        $ref: "#/definitions/MessageDescription"
    warnings:
      type: array
      items:
        $ref: "#/definitions/MessageDescription"
  
 MessageDescription:
  type: object
  properties:
    message: 
      type: string
      description: "error message"
 
