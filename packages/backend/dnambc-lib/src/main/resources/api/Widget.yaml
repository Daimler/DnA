# LICENSE START
# 
# MIT License
# 
# Copyright (c) 2019 Daimler TSS GmbH
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# 
# LICENSE END 
#
#-----------------------------------------------------------------------------------------------------
#  **
#  ** File Name  : Widget.yaml
#  **
#  ** Module     : core
#  **

#  -------------------------------------------------------------------------------------------------------
#
#  CHANGE HISTORY
#
#  Created By         :  KAMERAO
#
#  Bug Number         :
#  Changed By         :
#  Change Description :
#  Change On          :
#  Search String      :
#
#  -------------------------------------------------------------------------------------------------------


swagger: "2.0"
info:
  version: "1.0.0"
  title: "Core widget Service"
host: "localhost:7171"
basePath: "/api/1.0"
consumes:
  - "application/json"
produces:
  - "application/json"
tags:
  - name: "widgets"
    description: "This service is used to manage widgets for the user Dashboard."

schemes:
  - "https"

paths:

  # path to create a new widget and fetch all valid widgets or by intent
  #
  #  supprorted http methods GET, POST and DELETE
  #
  # path example ../widgets

  /widgets:
    post:
      tags:
        - "widgets"
      summary: "Adds a new widget."
      description: "Adds a new non existing widget"
      operationId: "createWidget"
      parameters:
        - name: "widgetRequestVO"
          in: "body"
          description: "Request Body that contains data required for creating a new widget"
          required: true
          schema:
            $ref: "#/definitions/widgetRequestVO"
      responses:
        201:
          description: "Returns message of success or failure "
          schema:
            $ref: "#/definitions/widgetVO"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/GenericMessage"
        401:
          description: "Request does not have sufficient credentials."
        403:
          description: "Request is not authorized."
        405:
          description: "Method not allowed"
        500:
          description: "Internal error"
    get:
      tags:
        - "widgets"
      summary: "Get all available widgets."
      description:  "Get all widgets. This endpoints will be used to Get all valid available widgets maintenance records."
      operationId: "getAll"
      responses:
        201:
          description: "Returns message of success or failure"
          schema:
            $ref: "#/definitions/widgetCollection"
        204:
          description: "Fetch complete, no content found."
        400:
          description: "Bad request."
        401:
          description: "Request does not have sufficient credentials."
        403:
          description: "Request is not authorized."
        405:
          description: "Method not allowed"
        500:
          description: "Internal error"

  # path to delete existing widgets
  #
  #  supported http methods DELETE
  #
  # path examples----
  #   DELETE    .../widgets/xxx

  /widgets/{id}:
    delete:
      tags:
        - "widgets"
      summary: "Deletes the widget identified by given ID."
      description:  "Deletes the widget identified by given ID"
      operationId: "delete"
      parameters:
        - name: "id"
          in: "path"
          description: "Id of the widget"
          required: true
          type: "string"
      responses:
        200:
          description: "Successfully deleted."
          schema:
            $ref: "#/definitions/GenericMessage"
        400:
          description: "Bad request"
        401:
          description: "Request does not have sufficient credentials."
        403:
          description: "Request is not authorized."
        404:
          description: "Invalid id, record not found."
        500:
          description: "Internal error"

definitions:
  widgetVO:
    type: object
    properties:
      id:
        type: string
        description: "ID of widget"
      name:
        type: string
        description: "Name of the widget"
        minLength: 1
        #pattern: '[a-zA-Z\s]+'
      widgetTitle:
        type: string
        description: "Title of the widget"
        minLength: 1
        #pattern: '[a-zA-Z\s]+'
      widgetDescription:
        type: string
        description: "Short Description of the widget"
        minLength: 1
        #pattern: '[a-zA-Z\s]+'
      widgetChartType:
        type: string
        description: "Chart type of the widget;expected values would be Summary, Bar, Line, Scatter"
        enum: ["Summary","Bar","Line","Scatter"]
      xaxisTitle:
        type: string
        description: "Chart  X-Axis title"
      yaxisTitle:
        type: string
        description: "Chart  Y-Axis title"
      dataEntries:
        type:  array
        description: "Entries containing a data key and its value"
        items:
          $ref: "#/definitions/widgetEntryVO"
      accessRoles:
        type: array
        description: "Roles that can enable this widget on the dashboard"
        items:
          $ref: "#/definitions/UserRoleVO"
    required:
      - name
      - widgetTitle
      - dataEntries
      - widgetDescription
      - widgetChartType
  widgetCollection:
    description: "Collection of widgets."
    type: array
    items:
      $ref: "#/definitions/widgetVO"
  widgetRequestVO:
    type: object
    properties:
      data:
        description: "Request data containing widget details to be created"
        $ref: "#/definitions/widgetVO"
  widgetEntryVO:
    type: object
    properties:
      key:
        type: string
        description: "Key identifying an unique data element of the widget"
      value:
        type: string
        description: "Data value for the corresponding key"

  UserRoleVO:
    type: object
    properties:
      id:
        type: string
        description: "ID of UserRole"
      name:
        type: string
        description: "Name of the UserRole"
        minLength: 1
        pattern: '[a-zA-Z\s]+'

  BindingResult:
    type: object

  GenericMessage:
    type: object
    properties:
      errors:
        type: array
        items:
          $ref: "#/definitions/MessageDescription"

  MessageDescription:
    type: object
    properties:
      message:
        type: string
        description: "error message"

