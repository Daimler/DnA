# LICENSE START
# 
# MIT License
# 
# Copyright (c) 2019 Daimler TSS GmbH
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# 
# LICENSE END 
#  
#-----------------------------------------------------------------------------------------------------
#  **
#  ** File Name  : divisions.yaml
#  **
#  ** Module     : core
#  ** 

#  -------------------------------------------------------------------------------------------------------
#
#  CHANGE HISTORY
#
#  Created By         :  BEALURI
#
#  Bug Number         :  
#  Changed By         :  
#  Change Description :  
#  Change On          :  
#  Search String      :  
#  
#  -------------------------------------------------------------------------------------------------------
  

swagger: "2.0"
info:
 version: "1.0.0"
 title: "core divisions Service"
host: "localhost:7171"
basePath: "/api/1.0"
consumes:
 - "application/json"
produces:
 - "application/json"
tags:
 - name: "divisions"
   description: "This service is used to maintain divisions used in solutions."

schemes:
- "https"

paths:

# create, update and getAll division
#
# supported http methods GET, POST
#
# path example ../divisions

 /divisions:
  get:
   tags:
    - "divisions"
   summary: "Get all available divisions."
   description:  "Get all divisions. This endpoints will be used to Get all valid available divisions maintenance records."
   operationId: "getAll"
   parameters:
     - name: ids
       in: query
       description: Ids of the division for which sub-divisions are to be fetched
       required: false
       type: array
       items:
        type: string
   responses:
    201:
     description: "Returns message of succes or failure"
     schema:
       $ref: "#/definitions/DivisionCollection"
    204:
      description: "Fetch complete, no content found."
    400:
     description: "Bad request."
    401:
     description: "Request does not have sufficient credentials."
    403:
     description: "Request is not authorized."
    405:
     description: "Method not allowed"
    500:
     description: "Internal error"

  post:
   tags:
    - "divisions"
   summary: "Add a new division."
   description: "Add a new non existing division which is used in providing solution."
   operationId: "create"
   parameters:
    - name: "divisionRequestVO" 
      in: "body" 
      description: "Request body that contains data required for creating a new division" 
      required: true
      schema:
       $ref: "#/definitions/DivisionRequestVO"
   responses:
    201:
     description: "Returns message of succes or failure " 
     schema:
       $ref: "#/definitions/DivisionResponseVO"
    400:
     description: "Bad Request"
    401:
     description: "Request does not have sufficient credentials."
    403:
     description: "Request is not authorized."
    405:
     description: "Method not allowed"
    500:
     description: "Internal error"
     
  put:
    tags:
    - "divisions"
    summary: "Update the division identified by given ID."
    description:  "Update the division identified by given ID"
    operationId: "update"
    parameters:
      - name: "divisionRequestVO"
        in: "body" 
        description: "Request Body that contains data required for updating division." 
        required: true
        schema:
         $ref: "#/definitions/DivisionRequestVO"    
    responses:
      200:
       description: "Successfully updated."
       schema:
         $ref: "#/definitions/DivisionResponseVO"
      400:
       description: "Bad Request"
      401:
       description: "Request does not have sufficient credentials."
      403:
       description: "Request is not authorized."
      405:
       description: "Method not allowed"
      500:
       description: "Internal error"       
     
# path to delete existing division
#
#  supported http method DELETE
#
# path examples----
#   DELETE    .../divisions/xxx

 /divisions/{id}:
  delete:
    tags:
    - "divisions"
    summary: "Deletes the division identified by given ID."
    description:  "Deletes the division identified by given ID"
    operationId: "delete"
    parameters:
      - name: "id"
        in: "path"
        description: "Id of the division"
        required: true
        type: "string"
    responses:
      200:
       description: "Successfully deleted."
       schema:
         $ref: "#/definitions/GenericMessage"
      400:
       description: "Bad request"
      401:
       description: "Request does not have sufficient credentials."
      403:
       description: "Request is not authorized."
      404:
       description: "Invalid id, record not found."
      500:
       description: "Internal error" 
     
# Fetch all valid subdivisions or by intent
#
#  supported http methods GET, POST and DELETE 
#
# path example ../subdivisions

     
 /subdivisions/{id}:
  get:
   tags:
    - "subdivisions"
   summary: "Get all available subdivisions for a given division id."
   description:  "Get all subdivisions. This endpoints will be used to Get all valid available subdivisions for a given division-id maintenance records."
   operationId: "getById"
   parameters:
    - name: "id"
      in: "path"
      description: "Id of the division for which sub-divisions are to be fetched"
      required: true
      type: "string"
   responses:
    201:
     description: "Returns message of succes or failure"
     schema:
       $ref: "#/definitions/SubdivisionCollection"
    204:
      description: "Fetch complete, no content found."
    400:
     description: "Bad request."
    401:
     description: "Request does not have sufficient credentials."
    403:
     description: "Request is not authorized."
    405:
     description: "Method not allowed"
    500:
     description: "Internal error"


definitions:
 DivisionResponseVO:
   type: object
   properties:
     data:
       $ref: "#/definitions/DivisionVO"
     errors:
       type: array
       items:
         $ref: "#/definitions/MessageDescription"
         
 DivisionVO:
  type: object
  properties: 
    id:
     type: string
     description: "ID of Division"
    name:
     type: string
     description: "Name of the Division"
     minLength: 1
    subdivisions:
     type: array
     items: 
       $ref: "#/definitions/SubdivisionVO" 
    changeLogs:
      type: array
      items:
        $ref: "#/definitions/ChangeLogVO"
        
  required:
     - name       

 DivisionCollection: 
  description: "Collection of Division."
  type: array
  items: 
     $ref: "#/definitions/DivisionVO"
 
 SubdivisionVO:
  type: object
  properties: 
    id:
     type: string
     description: "ID of SubDivision"
    name:
     type: string
     description: "Name of the SubDivision"

 SubdivisionCollection: 
  description: "Collection of SubDivision."
  type: array
  items: 
     $ref: "#/definitions/SubdivisionVO"
     
 DivisionRequestVO:
  type: object
  properties:
    data:
      description: "Request data containing division details to be created"
      $ref: "#/definitions/DivisionVO"    
      
 ChangeLogVO:
    type: object
    description: "Describes a single change log record done on the solution"
    properties:
      changeDate:
        type: string
        format: date
        description: "Date on which this change occurred"
      modifiedBy:
        description: "User who changed the value"
        $ref: "#/definitions/TeamMemberVO"
      fieldChanged:
        type: string
        description: "Describe the attribute that changed"
      oldValue:
        type: string
        description: "Describes the old value of the changed attribute"
      newValue:
        type: string
        description: "Describes the new value of the changed attribute"
      changeDescription:
        type: string
        description: "Short Description on change/addition/removal of Digital Value" 
        
 TeamMemberVO:
    type: object
    properties:
      shortId:
        type: string
        description: "Short id of the user"
      userType:
        type: string
        description: "Internal or External"
        enum: [internal, external]
      firstName:
        type: string
        description: "First Name of the user"
      #     pattern: '[a-zA-Z]+'
      lastName:
        type: string
        description: "Last Name of the user"
      #     pattern: '[a-zA-Z]+'
      department:
        type: string
        description: "Department of the user"
      #     pattern: '^[^\W_]+(?: [^\W_]+)*$'
      email:
        type: string
        description: "E-Mail of the user"
        format: email
      mobileNumber:
        type: string
        description: "Mobile number of the user"
      #     minLength: 10
      #     maxLength: 10
      #     pattern: ^[1-9]\d{9}$
      company:
        type: string
        description: "Company name of the external member"
      teamMemberPosition:
        type: string
        description: "Position of team member in project"
#    required:
#      - teamMemberPosition 
 