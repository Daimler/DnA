package com.daimler.mbc.dna.malwarescanner.util;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import com.daimler.data.dto.solution.ChangeLogVO;
import com.daimler.dna.notifications.common.producer.KafkaProducerService;
import com.daimler.mbc.dna.malwarescanner.dto.appsubscription.SubscriptionVO;
import com.daimler.mbc.dna.malwarescanner.service.appsubscription.AppSubscriptionService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class AlertExpiringSubscriptionsTask {

	@Autowired
	private AppSubscriptionService appSubscriptionService;
	
	@Value("${task.alert.before-expiry-duration}")
	private String alertBeforeExpiryDay;
	
	//@Value("${dna.system.adminName}")
	private String dnaSystemAdminName = "DNA-System-Admin";

	//@Value("${task.alert.subscriptionExpiryEventName}")
	private String eventType = "Malware-Expiry-Alert";
		
	@Autowired
	private KafkaProducerService kafkaProducer;
	
	//@Scheduled(cron = "0 0 12 * * ?")
	 @Scheduled(cron = "2 * * * * ?")
	public void alertExpirySubscriptions() {
		
		 try {
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(new Date());
			calendar.add(Calendar.DATE, Integer.parseInt(alertBeforeExpiryDay)); 
			Date maxExpiryDate = calendar.getTime();
			List<SubscriptionVO> subscriptions = appSubscriptionService.getAllWithFilters("", true, ConstantsUtility.OPEN, null, "appName", "asc", 0, 0, null);
			if(subscriptions!= null && !subscriptions.isEmpty()) {
				log.info("Got all subscritions which are in open state, to scan for subscriptions that are about to be expired in {} number of days."
						+ " Total open subscriptions are {} ", alertBeforeExpiryDay, subscriptions.size());
				for(SubscriptionVO subscription: subscriptions) {
					Date expiryDate = subscription.getExpireOn();
					if(expiryDate!= null && expiryDate.compareTo(maxExpiryDate) <= 0) {
						long diff = maxExpiryDate.getTime() - expiryDate.getTime();
						String message = "Your malware subscription for application " + subscription.getAppName() + " is going to expiry in " 
								+ TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS) + " days.";
						boolean mailRequired = true;
						List<String> subscribedUsers = new ArrayList<>();
						subscribedUsers.add(subscription.getCreatedBy());
						List<String> subscribedUsersEmail = new ArrayList<>();
						List<ChangeLogVO> changeLogs = null;
						String resourceId = subscription.getAppId();
						kafkaProducer.send(eventType,resourceId , "", dnaSystemAdminName, message, mailRequired, subscribedUsers,subscribedUsersEmail,changeLogs);
						log.info("Published event to alert upcoming subscription expiry for appName {} ", subscription.getAppName());
					}
				}
			}
		 }catch(Exception e) {
			 log.error("Error occuried while fetching subscriptions to notifying creator about expiring subscriptions");
		 }
	}
	
	
}
