/* LICENSE START
 * 
 * MIT License
 * 
 * Copyright (c) 2019 Daimler TSS GmbH
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 * LICENSE END 
 */

package com.daimler.mbc.dna.malwarescanner.app.authaspect;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.util.ObjectUtils;
import org.springframework.util.StringUtils;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.daimler.mbc.dna.malwarescanner.exceptions.GenericMessage;
import com.daimler.mbc.dna.malwarescanner.exceptions.MessageDescription;

@Aspect
@Component
public class MalwareApiAuthenticationAspect {
	private static final Logger LOG = LoggerFactory.getLogger(MalwareApiAuthenticationAspect.class);
	@Value("${malware.api.security.uri}")
	private String uri;

	@Value("${malware.api.security.token}")
	private String authToken;

	@Value("${malware.basicAuth.token}")
	private String basicAuthToken;

	@Autowired
	RestTemplate restTemplate;

	@Around(value = "target(com.daimler.mbc.dna.malwarescanner.app.authaspect.MalwareAuthController)")
	public Object authenticateRequest(ProceedingJoinPoint jp) throws Throwable {

		final HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes())
				.getRequest();
		String appId = request.getHeader("appId");
		String appKey = request.getHeader("apiKey");
		String token = request.getHeader(HttpHeaders.AUTHORIZATION);
		if (StringUtils.hasText(token)) {
			LOG.info("Processing basic authentication...");
			if (!token.equals("Basic " + basicAuthToken)) {
				return forbidRequest("Failed to validate token, please provide valid credential and try.");
			} else {
				return jp.proceed();
			}
		} else if (StringUtils.hasText(appKey) && StringUtils.hasText(appId)) {
			try {
				HttpHeaders headers = new HttpHeaders();
				headers.set("Accept", "application/json");
				headers.set("Content-Type", "application/json");
				headers.set("Authorization", authToken);
				JSONObject personJsonObject = new JSONObject();
				personJsonObject.put("appId", appId);
				personJsonObject.put("apiKey", appKey);
				JSONObject data = new JSONObject();
				data.put("data", personJsonObject);
				HttpEntity entity = new HttpEntity<>(data.toString(), headers);
				ResponseEntity<String> response = restTemplate.exchange(uri, HttpMethod.POST, entity, String.class);
				if (response != null && response.hasBody()) {
					JSONObject result = new JSONObject(response.getBody());
					if (result != null && result.getBoolean("validApiKey")) {
						return jp.proceed();
					} else {
						if (result.has("errors") && !ObjectUtils.isEmpty(result.getJSONArray("errors"))) {
							JSONArray errors = result.getJSONArray("errors");
							return forbidRequest(errors.getJSONObject(0).getString("message"));
						} else {
							return forbidRequest("Failed to validate appId/appKey. Please provide valid appId/appKey");
						}
					}

				}
			} catch (Exception e) {
				LOG.error("Exception occurred {}", e.getMessage());
				return forbidRequest("Failed to validate appId/appKey. Please provide valid appId/appKey");
			}
		}
		return forbidRequest("Failed to validate appId/appKey. Please provide valid appId/appKey");
	}

	private ResponseEntity<GenericMessage> forbidRequest(String msg) {
		LOG.info(msg);
		GenericMessage resposeMessage = null;
		resposeMessage = new GenericMessage();
		MessageDescription errMsg = new MessageDescription();
		List<MessageDescription> errors = new ArrayList<>();
		errMsg.setMessage(msg);
		errors.add(errMsg);
		resposeMessage.setErrors(errors);
		return new ResponseEntity<>(resposeMessage, HttpStatus.UNAUTHORIZED);
	}

}
