/* LICENSE START
 * 
 * MIT License
 * 
 * Copyright (c) 2019 Daimler TSS GmbH
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 * LICENSE END 
 */

package com.daimler.mbc.dna.malwarescanner.service;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.io.FilenameUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.daimler.mbc.dna.malwarescanner.app.config.ClamAVClient;
import com.daimler.mbc.dna.malwarescanner.dto.FileScanDetailsVO;
import com.daimler.mbc.dna.malwarescanner.exceptions.ClamAVSizeLimitException;

@Service
public class BaseMalwareScanService implements MalwareScanService {

	private static Logger LOGGER = LoggerFactory.getLogger(BaseMalwareScanService.class);

	@Autowired
	private ClamAVClient clamAVClient;

	public List<FileScanDetailsVO> scanFiles(MultipartFile[] files) {
		LOGGER.info("File received = {} ", (files != null ? files.length : null));
		return Arrays.stream(files).map(multipartFile -> {
			FileScanDetailsVO fileScanDetailsVO = new FileScanDetailsVO();
			long startTime = System.currentTimeMillis();
			fileScanDetailsVO.setUploadTime(startTime);
			try {
				byte[] response = clamAVClient.scan(multipartFile.getInputStream(), fileScanDetailsVO);
				Boolean status = ClamAVClient.isCleanReply(response);
				fileScanDetailsVO.setDetected(status != null ? !status : status);
				LOGGER.info("File Scanned = {} Clam AV Response = {} ", multipartFile.getOriginalFilename(),
						(status != null ? status : null));
			} catch (ClamAVSizeLimitException exception) {
				LOGGER.error("ClamAVSizeLimitException occurred while scanning using clam av = {} ",
						exception.getMessage());
				fileScanDetailsVO.setErrorMessage(exception.getMessage());
			} catch (Exception e) {
				LOGGER.error("Exception occurred while scanning using clam av = {} ", e.getMessage());
				LOGGER.debug("Exception stacktrace for scan {}",e.getStackTrace().toString());
				fileScanDetailsVO.setErrorMessage(e.getMessage());
			}
			if (fileScanDetailsVO.isDetected() != null && fileScanDetailsVO.isDetected()) {
				fileScanDetailsVO.setErrorMessage(
						"Malware detected in the uploaded file " + multipartFile.getOriginalFilename() + ".");
			}
			fileScanDetailsVO.setFileName(multipartFile.getOriginalFilename());
			fileScanDetailsVO.setFileType(FilenameUtils.getExtension(multipartFile.getOriginalFilename()));
			fileScanDetailsVO.setFileSize(multipartFile.getSize());
			fileScanDetailsVO.setScanTime(System.currentTimeMillis() - startTime);
			return fileScanDetailsVO;
		}).collect(Collectors.toList());
	}

}
