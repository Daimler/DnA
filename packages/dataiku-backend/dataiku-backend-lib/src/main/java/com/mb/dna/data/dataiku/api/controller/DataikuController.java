		DataikuProjectSummaryDetailResponseDto responseDto = new DataikuProjectSummaryDetailResponseDto();
		GenericMessage response = new GenericMessage();
		List<MessageDescription> errors = new ArrayList<>();
		List<MessageDescription> warnings = new ArrayList<>();
				MessageDescription errMsg = new MessageDescription("Forbidden. Does not have permissions to perform this operation.");
				log.error("Forbidden. User {} does not have permissions to perform this operation fetchById for id {}",userId,id);
				errors.add(errMsg);
				response.setErrors(errors);
				response.setWarnings(warnings);
				responseDto.setResponse(response);
				return Response.status(Status.FORBIDDEN).entity(responseDto).build();
			MessageDescription errMsg = new MessageDescription("No record found.");
			log.error("couldnt find any record. For user {} fetchById for id {}",userId,id);
			errors.add(errMsg);
			response.setErrors(errors);
			response.setWarnings(warnings);
			responseDto.setResponse(response);
			return Response.status(Status.NOT_FOUND).entity(responseDto).build();
		
		DataikuProjectSummaryDetailResponseDto responseDto = new DataikuProjectSummaryDetailResponseDto();
		GenericMessage response = new GenericMessage();
		List<MessageDescription> errors = new ArrayList<>();
		List<MessageDescription> warnings = new ArrayList<>();
				MessageDescription errMsg = new MessageDescription("Forbidden. Does not have permissions to perform this operation.");
				log.error("Forbidden. User {} does not have permissions to perform this operation fetch by name {} and instance {}",userId,projectname,cloudprofile);
				errors.add(errMsg);
				response.setErrors(errors);
				response.setWarnings(warnings);
				responseDto.setResponse(response);
				return Response.status(Status.FORBIDDEN).entity(responseDto).build();
			MessageDescription errMsg = new MessageDescription("No record found.");
			log.error("couldnt find any record. For user {} fetch by name {} and instance {} ",userId,projectname,cloudprofile);
			errors.add(errMsg);
			response.setErrors(errors);
			response.setWarnings(warnings);
			responseDto.setResponse(response);
			return Response.status(Status.NOT_FOUND).entity(responseDto).build();

