# LICENSE START
# 
# MIT License
# 
# Copyright (c) 2019 Daimler TSS GmbH
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# 
# LICENSE END 
#
#-----------------------------------------------------------------------------------------------------
#  **
#  ** File Name  : report.yaml
#  **
#  ** Module     : core
#  **

#  -------------------------------------------------------------------------------------------------------
#
#  CHANGE HISTORY
#
#  Created By         :  PRINCKU
#
#  Bug Number         :
#  Changed By         :
#  Change Description :
#  Change On          :
#  Search String      :
#
swagger: "2.0"
info:
  version: "1.0.0"
  title: "core report Service"
host: "localhost:7171"
basePath: "/api/1.0"
consumes:
  - "application/json"
produces:
  - "application/json"
tags:
  - name: "reports"
    description: "This service is used for reports maintenance."

schemes:
  - "https"

paths:
  # path to create, update, getAll report
  #
  #  supprorted http methods GET, PUT, POST
  #
  # path example ../reports

  /reports:
    get:
      tags:
        - "reports"
      summary: "Get all available reports."
      description: "Get all reports. This endpoints will be used to get all valid available report records."
      operationId: "getAll"
      parameters:
        - name: published
          in: query
          description: Filtering reports based on publish state. Draft or published, values true or false
          required: false
          type: boolean
        - name: status
          in: query
          description: Project status of reports
          required: false
          type: string
        - name: searchTerm
          in: query
          description: searchTerm to filter reports. SearchTerm is comma seperated search keywords which are used to search Tags and ProductName of reports. Example "BAT, java"
          required: false
          type: string
        - name: tags
          in: query
          description: tags to filter reports. tags is comma seperated search keywords which are used to search Tags of reports. Example "BAT, java"
          required: false
          type: string       
        - name: offset
          in: query
          description: page number from which listing of reports should start. Offset. Example 2
          required: false
          type: integer
        - name: limit
          in: query
          description: page size to limit the number of reports, Example 15
          required: false
          type: integer
        - name: sortBy
          in: query
          description: Sort reports by a given variable like productName, status
          required: false
          type: string
          enum: [productName, status, department, art]
        - name: sortOrder
          in: query
          description: Sort reports based on the given order, example asc,desc
          required: false
          type: string
          enum: [asc,desc]
        - name: division
          in: query
          description: List of IDs of divisions and subdivisions under each division of reports. Example [{1,[2,3]},{2,[1]},{3,[4,5]}]
          required: false
          type: string
        - name: department
          in: query
          description: List of deparments. Example dep1,dep2,dep3
          required: false
          type: string 
        - name: processOwner
          in: query
          description: List of processOwner. Example shortID1,shortId2
          required: false
          type: string
        - name: art
          in: query
          description: List of art. Example art1,art2,art3
          required: false
          type: string                
      responses:
        201:
          description: "Returns message of success or failure"
          schema:
            $ref: "#/definitions/ReportCollection"
        204:
          description: "Fetch complete, no content found."
        400:
          description: "Bad request."
        401:
          description: "Request does not have sufficient credentials."
        403:
          description: "Request is not authorized."
        405:
          description: "Method not allowed"
        500:
          description: "Internal error"
  
    post:
      tags:
        - "reports"
      summary: "Add a new report."
      description: "Adds a new non existing report."
      operationId: "create"
      parameters:
        - name: "reportRequestVO"
          in: "body"
          description: "Request Body that contains data required for creating a new report"
          required: true
          schema:
            $ref: "#/definitions/ReportRequestVO"    
      responses:
        200:
          description: "Returns message of succes"
          schema:
            $ref: "#/definitions/ReportResponseVO"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/GenericMessage"
        401:
          description: "Request does not have sufficient credentials."
        403:
          description: "Request is not authorized."
        405:
          description: "Method not allowed"
        500:
          description: "Internal error"      
    
    put:
      tags:
        - "reports"
      summary: "Update existing report."
      description: "Update an existing report."
      operationId: "update"
      parameters:
        - name: "reportRequestVO"
          in: "body"
          description: "Request Body that contains data required for creating a new report"
          required: true
          schema:
            $ref: "#/definitions/ReportRequestVO"    
      responses:
        200:
          description: "Returns message of succes"
          schema:
            $ref: "#/definitions/ReportResponseVO"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/GenericMessage"
        401:
          description: "Request does not have sufficient credentials."
        403:
          description: "Request is not authorized."
        405:
          description: "Method not allowed"
        500:
          description: "Internal error"

  # path to get and delete report by id
  #
  #  Supported http methods GET, DELETE
  #
  # path example ../reports
  /reports/{id}:
    get:
      tags:
        - "reports"
      summary: "Get Report for a given Id."
      description: "Get report for a given identifier. This endpoints will be used to get a report for a given identifier."
      operationId: "getById"
      parameters:
        - name: "id"
          in: "path"
          description: "Report ID to be fetched"
          required: true
          type: "string"
      responses:
        200:
          description: "Returns message of success or failure"
          schema:
            $ref: "#/definitions/ReportVO"
        204:
          description: "Fetch complete, no content found."
        400:
          description: "Bad request."
        401:
          description: "Request does not have sufficient credentials."
        403:
          description: "Request is not authorized."
        405:
          description: "Method not allowed"
        500:
          description: "Internal error"
    delete:
      tags:
        - "reports"
      summary: "Delete Report for a given Id."
      description: "Delete report for a given identifier."
      operationId: "delete"
      parameters:
        - name: "id"
          in: "path"
          description: "Report ID to be deleted"
          required: true
          type: "string"
      responses:
        201:
          description: "Returns message of success or failure"
          schema:
            $ref: "#/definitions/GenericMessage"
        204:
          description: "Fetch complete, no content found."
        400:
          description: "Bad request."
        401:
          description: "Request does not have sufficient credentials."
        403:
          description: "Request is not authorized."
        405:
          description: "Method not allowed"
        500:
          description: "Internal error"
          

  # path to get all processOwner
  #
  #  supported http methods GET
  #
  # path example ../reports/processowners

  /reports/processowners:
    get:
      tags:
        - "reports"
      summary: "Get all available processOwners."
      description: "Get all processOwners. This endpoints will be used to get all valid available processOwners records."
      operationId: "getAllProcessOwner"
      responses:
        201:
          description: "Returns message of success or failure"
          schema:
            $ref: "#/definitions/ProcessOwnerCollection"
        204:
          description: "Fetch complete, no content found."
        400:
          description: "Bad request."
        401:
          description: "Request does not have sufficient credentials."
        403:
          description: "Request is not authorized."
        405:
          description: "Method not allowed"
        500:
          description: "Internal error"

definitions:
  DescriptionVO:
    type: object
    properties:
      reportLink:
        type: string
        description: "Report Link"   
      productDescription: 
        description: "Description about the report"
        type: string
        minLength: 1
      reportType: 
        description: "Type of report"
        type: string
      piiData: 
        type: string
        description: "Personally identifiable information."
      status:
        type: string
        description: "Status of the report"
        minLength: 1
      division:
        $ref: "#/definitions/DivisionVO"
      department:
        type: string
        description: "Department of the report"
        minLength: 1                         
      integratedPortal:
        type: string
      frontendTechnologies:
        type: array
        items:
          type: string
      tags:
        type: array
        items:
          type: string
      agileReleaseTrain:
        type: string
    required:
      - productDescription
      - status
      - frontendTechnologies
      - department
  
  CustomerVO:
    type: object
    properties:  
      internalCustomers:
        type: array
        items:
          $ref: "#/definitions/InternalCustomerVO"
      externalCustomers:
        type: array
        items:
          $ref: "#/definitions/ExternalCustomerVO"    
      
  InternalCustomerVO:
    type: object
    properties: 
#      name:
#        $ref: "#/definitions/TeamMemberVO"
      customerRelation: 
        type: string
        minLength: 1           
      level:
        type: string
        minLength: 1
      division:
        $ref: "#/definitions/DivisionVO"
      department:
        type: string
        description: "Department of customer"
        minLength: 1              
      legalEntity: 
        description: ""
        type: string
        minLength: 1
      accessToSensibleData:
        type: string              
      comment:
        type: string
      processOwner:
        $ref: "#/definitions/TeamMemberVO"        
    required:
      - customerRelation
      - level
      - department
      - legalEntity
      - accessToSensibleData
      
  ExternalCustomerVO:
    type: object
    properties: 
#      name:
#        $ref: "#/definitions/TeamMemberVO"
      customerRelation: 
        type: string
        minLength: 1
      companyName:
        type: string
        minLength: 1               
      comment:
        type: string      
    required:
      - customerRelation
      - companyName     
      
  KPIVO:
    type: object
    properties:  
      name:
        $ref: "#/definitions/KpiNameVO"
      reportingCause: 
        description: ""
        type: array
        items:
          type: string
          minLength: 1
      description:
        type: string
      kpiLink:
        type: string
        description: "KPI - link"        
    required:
      - name
      - reportingCause
      
  KpiNameVO: 
    type: object
    properties:  
      kpiName:
        type: string
        description: "KPI name"
      kpiClassification:
        type: string        
        description: "KPI classification"
#    required:
#     - name
#     - classification   
          
  DataWarehouseVO:
    type: object
    properties:     
      dataWarehouse:
        type: string
        minLength: 1
#      commonFunctions: 
#        type: array
#        items:
#          type: string
      dataClassification: 
        type: string
        minLength: 1
      connectionType:
        type: string
    required:
      - dataWarehouse
      - dataClassification
          
  SingleDataSourceVO:
    type: object
    properties: 
      dataSources:
        type: array
        items:
          $ref: "#/definitions/DataSourceVO"          
      dataClassification: 
        type: string
        minLength: 1
      connectionType:
        type: string
    required:
      - dataSources
      - dataClassification
      
  DataSourceVO:
    type: object
    properties:      
      dataSource:
        type: string
        minLength: 1
        description: "DataSource name"
      weightage:
        type: number
        minLength: 1
        description: "Weightage of dataSource in %"
    required:
      - dataSource
      - weightage              
      
  DataAndFunctionVO:
    type: object
    properties:  
      dataWarehouseInUse:
        type: array
        items:
          $ref: "#/definitions/DataWarehouseVO"
      singleDataSources:
        type: array
        items:
          $ref: "#/definitions/SingleDataSourceVO"                     
          
  MemberVO:
    description: "Team Member."
    type: object
    properties:        
      reportAdmins:
        type: array
        items:
          $ref: "#/definitions/TeamMemberVO"
                             
  TeamMemberVO:
    type: object
    properties:
      shortId:
        type: string
        description: "Short id of the user"
      userType:
        type: string
        description: "Internal or External"
        enum: [internal, external]
      firstName:
        type: string
        description: "First Name of the user"
      lastName:
        type: string
        description: "Last Name of the user"
      department:
        type: string
        description: "Department of the user"
      email:
        type: string
        description: "E-Mail of the user"
        format: email
      mobileNumber:
        type: string
        description: "Mobile number of the user"
      company:
        type: string
        description: "Company name of the external member"
      teamMemberPosition:
        type: string
        description: "Position of team member in project"
    required:
      - shortId       

  ReportVO:
    type: object
    properties:
      id:
        type: string
      reportId:
        type: string        
      productName:
        type: string
        description: "Name of the Report"
        minLength: 1  
      createdDate:
        type: string
        format: date
      lastModifiedDate:
        type: string
        format: date
      closeDate:
        type: string
        format: date
      createdBy:
        $ref: "#/definitions/CreatedByVO"
      publish:
        type: boolean
        description: "Flag to identify if solution is in draft stage or in published state. Default value is false."    
      description:
        $ref: "#/definitions/DescriptionVO"
      customer:
        $ref: "#/definitions/CustomerVO"        
      kpis:
        type: array
        items:
          $ref: "#/definitions/KPIVO"   
      dataAndFunctions:
          $ref: "#/definitions/DataAndFunctionVO"        
      members:
        $ref: "#/definitions/MemberVO"
      openSegments:
        type: array
        description: "This attribute stores all the open/input sections that user has completed in the report creation process"
        items:
          type: string
          enum:
            [
              "Description",
              "Customer",
              "Kpis",
              "DataAndFunctions",
              "Members"
            ]  
    required:
      - productName
      - publish                      

  ReportRequestVO:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReportVO"
        
  ReportResponseVO:
    type: object
    properties:
      data:
        $ref: "#/definitions/ReportVO"
      errors:
        type: array
        items:
          $ref: "#/definitions/MessageDescription"
          
  ReportCollection:
    description: "Collection of Reports."
    type: object
    properties:
      totalCount:
        type: integer
        description: "Total Record Count"
      records:
        type: array
        items:
          $ref: "#/definitions/ReportVO"
          
  ArtVO:
   type: object
   properties: 
     id:
      type: integer
      format: int64
      description: "ID of art"
      minLength: 1
     name:
      type: string
      description: "Name of the art"
      minLength: 1    
   required:
      - name
      - id
      
  DivisionVO:
    type: object
    properties:
      id:
        type: string
        description: id of division
      name:
        type: string
        description: name of division
      subdivision:
        $ref: "#/definitions/SubdivisionVO"
    required:
      - id
      - name
      
  SubdivisionVO:
    type: object
    properties:
      id:
        type: string
        description: id of subdivision
      name:
        type: string
        description: name of subdivision
      
  ProcessOwnerCollection:
    description: "Collection of processOwners."
    type: object
    properties:
      records:
        type: array
        items:
          $ref: "#/definitions/TeamMemberVO"                               
          
  CreatedByVO:
    type: object
    properties:
      id:
        type: string
        description: "ID of user"
      firstName:
        type: string
        description: "First Name of the user"
      lastName:
        type: string
        description: "Last Name of the user"
      department:
        type: string
        description: "Department of the user"
      email:
        type: string
        description: "E-Mail of the user"
      mobileNumber:
        type: string
        description: "Mobile number of the user" 
