import cn from 'classnames';
import React, { useEffect, useState } from 'react';
// @ts-ignore
import Notification from '../../../../../assets/modules/uilab/js/src/notification';
import { ISubsriptionAdminList } from '../../../../../globals/types';
import {
  getDateDifferenceFromTodayUsingGetDate,
  getDateTimeFromTimestamp,
} from '../../../../../services/utils';
import Styles from './ListApiKeys.scss';
// @ts-ignore
import ProgressIndicator from '../../../../../assets/modules/uilab/js/src/progress-indicator';
const classNames = cn.bind(Styles);
// @ts-ignore
import Tooltip from '../../../../../assets/modules/uilab/js/src/tooltip';

let isTouch = false;
const ListApiKeys = (props: any) => {
  const item = props.item;

  const [showContextMenu, setShowContextMenu] = useState<boolean>(false);
  const [showLocationsContextMenu, setShowLocationsContextMenu] = useState<boolean>(false);
  const [contextMenuOffsetTop, setContextMenuOffsetTop] = useState<number>(0);
  const [contextMenuOffsetLeft, setContextMenuOffsetLeft] = useState<number>(0);

  const showCurrentApiKey = (keyId: string) => {
    return () => {
      props.showCurrentApiKey(keyId);
    };
  };

  const hideCurrentApiKey = () => {
    props.hideCurrentApiKey('');
  };
  const copyApiKey = (apikey: string) => {
    return () => {
      navigator.clipboard.writeText(apikey).then(() => {
        Notification.show('Copied to Clipboard');
      });
    };
  };
  const deleteCurrentKey = (keyId: string) => {
    return () => {
      props.deleteCurrentKey(keyId);
    };
  };
  const expireAction = (item: ISubsriptionAdminList) => {
    return () => {
      props.showExpiryModel(item);
    };
  };

  const handleContextMenuOutside = (event: MouseEvent | TouchEvent) => {
    if (event.type === 'touchend') {
      isTouch = true;
    }

    // Click event has been simulated by touchscreen browser.
    if (event.type === 'click' && isTouch === true) {
      return;
    }

    const target = event.target as Element;
    const elemClasses = target.classList;
    const cardDivElement = document.querySelector('#card-' + props.item.id);
    const contextMenuWrapper = cardDivElement.querySelector('.contextMenuWrapper');
    const locationContextMenuWrapper = cardDivElement.querySelector('.contextMenuWrapper');

    if (
      cardDivElement &&
      !target.classList.contains('trigger') &&
      !target.classList.contains('context') &&
      !target.classList.contains('contextList') &&
      !target.classList.contains('contextListItem') &&
      contextMenuWrapper !== null &&
      contextMenuWrapper.contains(target) === false &&
      (showContextMenu || showLocationsContextMenu)
    ) {
      setShowContextMenu(false);
      setShowLocationsContextMenu(false);
    } else if (cardDivElement.contains(target) === false) {
      setShowContextMenu(false);
      setShowLocationsContextMenu(false);
    }

    if (!contextMenuWrapper?.contains(target)) {
      setShowContextMenu(false);
    }

    if (!locationContextMenuWrapper?.contains(target)) {
      setShowLocationsContextMenu(false);
    }

    if (
      (showContextMenu || showLocationsContextMenu) &&
      (elemClasses.contains('contextList') ||
        elemClasses.contains('contextListItem') ||
        elemClasses.contains('contextMenuWrapper') ||
        elemClasses.contains('locationsText'))
    ) {
      event.stopPropagation();
    }
  };

  useEffect(() => {
    Tooltip.defaultSetup();
    document.addEventListener('touchend', handleContextMenuOutside, true);
    document.addEventListener('click', handleContextMenuOutside, true);
  }, []);

  useEffect(() => {
    return () => {
      document.removeEventListener('touchend', handleContextMenuOutside, true);
      document.removeEventListener('click', handleContextMenuOutside, true);
    };
  }, []);

  const toggleContextMenu = (e: React.FormEvent<HTMLSpanElement>) => {
    e.stopPropagation();
    setContextMenuOffsetTop(e.currentTarget.offsetTop - 10);
    setContextMenuOffsetLeft(e.currentTarget.offsetLeft - 200);
    setShowLocationsContextMenu(false);
    setShowContextMenu(!showContextMenu);
  };

  return (
    <React.Fragment>
      <tr className="data-row" key={item.id}>
        <td className={Styles.createdByCol}>{item.createdBy}</td>
        <td>
          <p>{item.appName}</p>
        </td>
        <td className="wrap-text">
          <p className={Styles.descriptionColumn}>{item.description}</p>
        </td>
        <td className={Styles.appId}>
          <div className={Styles.appIdParentDiv}>
            <div className={Styles.refreshedKey}>
              {item.id === props.showApiKey ? (
                <React.Fragment>
                  {props.keyRefreshed != '' && item.id === props.keyRefreshedId ? (
                    props.keyRefreshed
                  ) : (
                    <React.Fragment>{item.apiKey}</React.Fragment>
                  )}
                </React.Fragment>
              ) : (
                <React.Fragment>
                  &bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;
                </React.Fragment>
              )}
            </div>
            <div className={Styles.refreshedKeyIcon}>
              {item.id === props.showApiKey ? (
                <React.Fragment>
                  <i
                    className={Styles.showAppId + ' icon mbc-icon visibility-hide'}
                    onClick={hideCurrentApiKey}
                    tooltip-data="Hide"
                  />
                </React.Fragment>
              ) : (
                <React.Fragment>
                  <i
                    className={Styles.showAppId + ' icon mbc-icon visibility-show ' + Styles.visiblityshow}
                    onClick={showCurrentApiKey(item.id)}
                    tooltip-data="Show"
                  />
                </React.Fragment>
              )}
              <i
                className={Styles.cpyStyle + ' icon mbc-icon copy'}
                onClick={copyApiKey(item.apiKey)}
                tooltip-data="Copy"
              />
            </div>
          </div>

          <div className={Styles.malwareUsage}>
            <div className={Styles.expireOn}>
              <span className={Styles.metaLabel}>Expire On: </span>
              <span className={Styles.expireOnValue}>{!item.expireOn ? 'Never' : getDateTimeFromTimestamp(item.expireOn)}</span>
            </div>
            <div className={Styles.lastUsed}>
              <span className={Styles.metaLabel}>Last Used: </span>
              <span className={Styles.lastUsedOnValue}>
                {item.lastUsedOn
                  ? getDateDifferenceFromTodayUsingGetDate(item.lastUsedOn) === 0
                    ? 'Today'
                    : getDateDifferenceFromTodayUsingGetDate(item.lastUsedOn) + ' Days ago'
                  : 'NA'}
              </span>
            </div>
            <div className={Styles.usageCount}>
              <span className={Styles.metaLabel}>Usage count: </span> 
              <span className={Styles.metaValue}>{item.usageCount == null ? 0 : item.usageCount}</span>
            </div>
          </div>
        </td>
        {/* <td>{!item.expireOn ? 'Never' : getDateFromTimestamp(item.expireOn)}</td> */}
        <td id={'card-' + item.id} key={item.id} className={Styles.actionMenus}>
          <div className={classNames(Styles.contextMenu, showContextMenu ? Styles.open : '')}>
            <span onClick={toggleContextMenu} className={classNames('trigger', Styles.contextMenuTrigger)}>
              <i className="icon mbc-icon listItem context" />
            </span>
            <div
              style={{
                top: contextMenuOffsetTop + 'px',
                left: contextMenuOffsetLeft + 'px',
              }}
              className={classNames('contextMenuWrapper', showContextMenu ? Styles.showMenu : 'hide')}
            >
              <ul className="contextList">
                <li className="contextListItem" onClick={expireAction(item)}>
                  <span>Set Expiry</span>
                </li>
                <li className="contextListItem" onClick={deleteCurrentKey(item.id)}>
                  <span>Delete</span>
                </li>
              </ul>
            </div>
          </div>
        </td>
      </tr>
    </React.Fragment>
  );
};

export default ListApiKeys;
