import * as React from 'react';
// @ts-ignore
import Notification from '../../../../assets/modules/uilab/js/src/notification';
// @ts-ignore
import ProgressIndicator from '../../../../assets/modules/uilab/js/src/progress-indicator';
import { Pagination } from '../../pagination/Pagination';
import Styles from './MalwareScanapikeys.scss';

// import { history } from '../../../../router/History';
import { IFitlerCategory, ITagResult, ISubsriptionAdminList } from '../../../../globals/types';
import { ApiClient } from '../../../../services/ApiClient';
import { ISortField } from '../../allSolutions/AllSolutions';
import ListApiKeys from './listapikeys/ListApiKeys';

import { SESSION_STORAGE_KEYS } from '../../../../globals/constants';
import { ConfirmModal } from '../../../formElements/modal/confirmModal/ConfirmModal';
import { Modal } from '../../../formElements/modal/Modal';
import { MalwareExpiryModel } from './malwareexpiryModel/MalwareExpiryModel';
import { getQueryParameterByName } from '../../../../services/Query';
import ApiKeyDeleteModal from '../../malwareScanService/apiKeyDeleteModal/ApiKeyDeleteModal';

export interface ITagHandlingState {
  algoCategory: IFitlerCategory;
  dataSourceCategory: IFitlerCategory;
  languageCategory: IFitlerCategory;
  platformCategory: IFitlerCategory;
  tagCategory: IFitlerCategory;
  visualizationCategory: IFitlerCategory;
  currentFilterCategory: IFitlerCategory;
  categories: IFitlerCategory[];
  maxItemsPerPage: number;
  totalNumberOfRecords: number;
  currentPageNumber: number;
  currentPageOffset: number;
  totalNumberOfPages: number;
  sortBy: ISortField;
  results: ISubsriptionAdminList[];
  showDeleteModal: boolean;
  showPauseModal: boolean;
  showExpiryModel: boolean;
  tagToBeDeleted: ITagResult;
  searchText: string;
  relatedProductList: IFitlerCategory;
  showApiKey: String;
  keyRefreshedId: String;
  keyRefreshed: String;
  malwareDeletePopup: boolean;
  apiItemToSetExpiry: ISubsriptionAdminList;
  keyToBeDeleted: string;
}

export class MalwareScanapikeys extends React.Component<any, ITagHandlingState> {
  constructor(props: any) {
    super(props);
    this.state = {
      algoCategory: { id: 1, name: 'Algorithms' },
      dataSourceCategory: { id: 2, name: 'Data Sources' },
      languageCategory: { id: 3, name: 'Languages' },
      platformCategory: { id: 4, name: 'Platform' },
      tagCategory: { id: 5, name: 'Tags' },
      relatedProductList: { id: 7, name: 'Related Products' },
      visualizationCategory: { id: 6, name: 'Visualization' },
      currentFilterCategory: { id: 0, name: 'Select' },
      categories: [{ id: 0, name: 'Select' }],
      sortBy: {
        name: 'name',
        currentSortType: 'desc',
        nextSortType: 'asc',
      },
      maxItemsPerPage: parseInt(sessionStorage.getItem(SESSION_STORAGE_KEYS.PAGINATION_MAX_ITEMS_PER_PAGE), 10) || 15,
      totalNumberOfRecords: 0,
      totalNumberOfPages: 1,
      currentPageNumber: 1,
      currentPageOffset: 0,
      showDeleteModal: false,
      showPauseModal: false,
      showExpiryModel: false,
      tagToBeDeleted: null,
      searchText: null,
      results: [],
      showApiKey: '',
      keyRefreshedId: '',
      keyRefreshed: '',
      malwareDeletePopup: false,
      apiItemToSetExpiry: null,
      keyToBeDeleted: '',
    };
  }

  public onSearchInput = (e: React.FormEvent<HTMLInputElement>) => {
    ProgressIndicator.show();
    const searchText = e.currentTarget.value;
    this.setState({ searchText }, () => {
      ProgressIndicator.hide();
    });
  };
  public async componentDidMount() {
    const pageNumberOnQuery = getQueryParameterByName('page');
    const maxItemsPerPage = this.state.maxItemsPerPage;
    const currentPageNumber = pageNumberOnQuery ? parseInt(getQueryParameterByName('page'), 10) : 1;
    const currentPageOffset = pageNumberOnQuery ? (currentPageNumber - 1) * maxItemsPerPage : 0;
    this.setState({ currentPageNumber, currentPageOffset }, () => {
      this.callSubscriptionList();
    });
  }

  public callSubscriptionList() {
    ProgressIndicator.show();
    ApiClient.getMalwarescanSubscriListAdmin(this.state.maxItemsPerPage, this.state.currentPageOffset)
      .then((res) => {
        if (res.data) {
          // alert(res);
          this.state.results.push(res.data);
          const { maxItemsPerPage, currentPageNumber } = this.state;
          const totalNumberOfPages = Math.ceil(res.totalCount / maxItemsPerPage);
          this.setState({
            results: res.data,
            currentPageNumber: currentPageNumber > totalNumberOfPages ? 1 : currentPageNumber,
            totalNumberOfPages,
            totalNumberOfRecords: res.totalCount,
          });
          ProgressIndicator.hide();
        }
      })
      .catch((err) => err);
  }

  public showCurrentApiKey = (keyId: string) => {
    this.setState({
      showApiKey: keyId,
    });
  };
  public hideCurrentApiKey = () => {
    this.setState({
      showApiKey: '',
    });
  };
  public async getResults() {
    let results: ISubsriptionAdminList[] = [];
    if (this.state.searchText) {
      results = results.filter((result) => {
        return result.appName.toLowerCase().match(this.state.searchText.toLowerCase());
      });
    }
  }
  public showExpiryModel = (item: ISubsriptionAdminList) => {
    this.setState({
      showExpiryModel: true,
      apiItemToSetExpiry: item,
    });
  };
  public render() {
    const resultData = this.state.results.map((item) => {
      return (
        <ListApiKeys
          item={item}
          key={item.id}
          keyRefreshed={this.state.keyRefreshed}
          keyRefreshedId={this.state.keyRefreshedId}
          deleteCurrentKey={this.showDeleteConfirmModal}
          showCurrentApiKey={this.showCurrentApiKey}
          showApiKey={this.state.showApiKey}
          hideCurrentApiKey={this.hideCurrentApiKey}
          showExpiryModel={this.showExpiryModel}
        />
      );
    });
    const pauseModalContent: React.ReactNode = (
      <div id="contentparentdiv" className={Styles.modalContentWrapper}>
        <div className={Styles.modalContent}>
          Lorem Ipsum is simply dummy text of the printing and typesetting industry
        </div>
      </div>
    );
    // const deleteModalContent: React.ReactNode = (
    //   <div id="contentparentdiv" className={Styles.modalContentWrapper}>
    //     <div className={Styles.modalContent}>
    //       Lorem Ipsum is simply dummy text of the printing and typesetting industry
    //     </div>
    //   </div>
    // );
    return (
      <div className={Styles.mainPanel}>
        <div className={Styles.wrapper}>
          {/* <div className={Styles.searchPanel}>
            <div>
              <div className="input-field-group search-field">
                <label id="searchLabel" className="input-label" htmlFor="searchInput">
                  Search Entries
                </label>
                <input
                  type="text"
                  className="input-field search"
                  required={false}
                  id="searchInput"
                  maxLength={200}
                  placeholder="Type here"
                  autoComplete="off"
                  onChange={this.onSearchInput}
                />
              </div>
            </div>
          </div> */}
          {resultData.length === 0 ? (
            <div className={Styles.malwareIsEmpty}>There is no malwarescan key available</div>
          ) : (
            <div className={Styles.malwaresubscriptionList}>
              <table className="ul-table users">
                <thead>
                  <tr className="header-row">
                    <th>
                      <label
                        className={
                          'sortable-column-header ' +
                          (this.state.sortBy.name === 'name' ? this.state.sortBy.currentSortType : '')
                        }
                      >
                        {/* <i className="icon sort" /> */}
                        User Id
                      </label>
                    </th>
                    <th className={Styles.appNameDescr}>
                      <label
                        className={
                          ' sortable-column-header ' +
                          (this.state.sortBy.name === 'category' ? this.state.sortBy.currentSortType : '')
                        }
                      >
                        {/* <i className="icon sort" /> */}
                        App Name
                      </label>
                    </th>
                    <th className={Styles.appNameDescr}>
                      <label
                        className={
                          ' sortable-column-header ' +
                          (this.state.sortBy.name === 'category' ? this.state.sortBy.currentSortType : '')
                        }
                      >
                        {/* <i className="icon sort" /> */}
                        Description
                      </label>
                    </th>
                    <th className={Styles.apiKey}>
                      <label className={' sortable-column-header'}>API Key</label>
                    </th>
                    {/* <th>
                      <label className={'sortable-column-header'}>
                        <i className="icon sort" />
                        Expire On
                      </label>
                    </th> */}
                    <th>
                      <label className="sortable-column-header">Action</label>
                    </th>
                  </tr>
                </thead>
                <tbody>{resultData}</tbody>
              </table>
              {this.state.results.length ? (
                <Pagination
                  totalPages={this.state.totalNumberOfPages}
                  pageNumber={this.state.currentPageNumber}
                  onPreviousClick={this.onPaginationPreviousClick}
                  onNextClick={this.onPaginationNextClick}
                  onViewByNumbers={this.onViewByPageNum}
                  displayByPage={true}
                />
              ) : (
                ''
              )}
            </div>
          )}
          {this.state.showDeleteModal && (
            <ConfirmModal
              title="Are you sure to delete an API key?"
              acceptButtonTitle="Delete"
              cancelButtonTitle="Cancel"
              showAcceptButton={false}
              showCancelButton={false}
              show={this.state.showDeleteModal}
              content={
                <ApiKeyDeleteModal
                  subscriptionDeletesucces={this.onAcceptDeleteChanges}
                  malwarePopupClose={this.onCancellingDeleteChanges}
                  subscrId={this.state.keyToBeDeleted}
                />
              }
              onCancel={this.onCancellingDeleteChanges}
            />
          )}
          {this.state.showPauseModal && (
            <ConfirmModal
              title=""
              acceptButtonTitle="Yes"
              cancelButtonTitle="No"
              showAcceptButton={true}
              showCancelButton={true}
              show={this.state.showPauseModal}
              content={pauseModalContent}
              onCancel={this.onCancelPause}
              onAccept={this.onAcceptPause}
            />
          )}
          {this.state.showExpiryModel && (
            <Modal
              title={''}
              showAcceptButton={false}
              showCancelButton={false}
              modalWidth={'500px'}
              buttonAlignment="right"
              show={this.state.showExpiryModel}
              content={
                <MalwareExpiryModel
                  apiItemToSetExpiry={this.state.apiItemToSetExpiry}
                  onSuccess={this.closeExpiryModel}
                />
              }
              scrollableContent={false}
              onCancel={this.closeExpiryModel}
            />
          )}
        </div>
      </div>
    );
  }
  protected onCancellingDeleteChanges = () => {
    this.setState({ showDeleteModal: false });
  };
  protected onAcceptDeleteChanges = () => {
    console.log(' action - active');
    ProgressIndicator.show();
    ApiClient.deleteCurrentMalwareservice(this.state.keyToBeDeleted).then(() => {
      ProgressIndicator.hide();
      Notification.show('Deleted Successfully!');
      this.setState({
        showDeleteModal: false,
      });
      this.callSubscriptionList();
    });
  };
  protected onAcceptPause = () => {
    console.log(' action - active');
    ProgressIndicator.show();
  };
  protected onCancelPause = () => {
    this.setState({ showPauseModal: false });
  };
  public showDeleteConfirmModal = (keyId: string) => {
    this.setState({
      showDeleteModal: true,
      keyToBeDeleted: keyId,
    });
  };
  public showPauseConfirmModal = () => {
    this.setState({ showPauseModal: true });
  };
  public closeExpiryModel = () => {
    this.setState({ showExpiryModel: false });
    this.callSubscriptionList();
  };
  protected onPaginationPreviousClick = () => {
    const currentPageNumber = this.state.currentPageNumber - 1;
    const currentPageOffset = (currentPageNumber - 1) * this.state.maxItemsPerPage;
    this.setState({ currentPageNumber, currentPageOffset }, () => {
      this.callSubscriptionList();
    });
  };
  protected onPaginationNextClick = () => {
    let currentPageNumber = this.state.currentPageNumber;
    const currentPageOffset = currentPageNumber * this.state.maxItemsPerPage;
    currentPageNumber = currentPageNumber + 1;
    this.setState({ currentPageNumber, currentPageOffset }, () => {
      this.callSubscriptionList();
    });
  };
  protected showErrorNotification(message: string) {
    Notification.show(message, 'alert');
  }
  protected showNotification(message: string) {
    Notification.show(message);
  }
  protected onViewByPageNum = (pageNum: number) => {
    const currentPageOffset = 0;
    const maxItemsPerPage = pageNum;
    this.setState({ currentPageOffset, maxItemsPerPage, currentPageNumber: 1 }, () => {
      this.callSubscriptionList();
    });
  };
}
