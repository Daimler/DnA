import cn from 'classnames';
import React, { useState, useEffect } from 'react';
import Styles from './MalwareExpiryModel.scss';
import { ISubsriptionAdminList, ISubsriptionExpiryObjectData } from '../../../../../globals/types';
import { getDateAfterSomeDays, getDateTimeFromTimestamp } from '../../../../../services/utils';
// @ts-ignore
import Tooltip from '../../../../../assets/modules/uilab/js/src/tooltip';
// @ts-ignore
import Notification from '../../../../../assets/modules/uilab/js/src/notification';
// @ts-ignore
import ProgressIndicator from '../../../../../assets/modules/uilab/js/src/progress-indicator';
import { ApiClient } from '../../../../../services/ApiClient';

const classNames = cn.bind(Styles);
export interface IMalwareExpiryModel {
  apiItemToSetExpiry: ISubsriptionAdminList;
  onSuccess?: () => void;
}
export function MalwareExpiryModel(props: IMalwareExpiryModel) {
  const [showApiKey, setShowApiKey] = useState(false);
  const [expiryDays, setExpiryDays] = useState(-2);
  const [selectedExpiry, setSelectedExpiry] = useState('never');
  const [daysError, setDaysError] = useState('');

  const hideApiKey = () => {
    setShowApiKey(!showApiKey);
  };
  const copyApiKey = (apikey: string) => {
    return () => {
      navigator.clipboard.writeText(apikey).then(() => {
        Notification.show('Copied to Clipboard');
      });
    };
  };
  const copyAppId = (appId: string) => {
    return () => {
      navigator.clipboard.writeText(appId).then(() => {
        Notification.show('Copied to Clipboard');
      });
    };
  };
  const showApiKeyItem = () => {
    setShowApiKey(!showApiKey);
  };
  useEffect(() => {
    Tooltip.defaultSetup();
  }, []);

  const saveExpiry = (e: React.FormEvent<HTMLSpanElement>) => {
    if (selectedExpiry === 'day' && expiryDays < 0) {
      setDaysError('Please enter valid number of days');
    } else {
      setDaysError('');
      ProgressIndicator.show();
      const objTemp: ISubsriptionExpiryObjectData = {
        data: {
          appId: props.apiItemToSetExpiry.appId,
          description: props.apiItemToSetExpiry.description,
          expiryDays: expiryDays,
        },
      };
      ApiClient.saveExpiry(objTemp).then(
        (response) => {
          props.onSuccess();
          Notification.show('Date of Expiration saved successfully.');
          ProgressIndicator.hide();
        },
        (err) => {
          Notification.show('Something went wrong', 'alert');
          ProgressIndicator.hide();
        },
      );
    }
  };

  const setExpiry = (e: React.FormEvent<HTMLInputElement>, days: string) => {
    if (isNaN(parseInt(days))) {
      setExpiryDays(-2);
      e.preventDefault();
    } else {
      setExpiryDays(parseInt(days));
    }
  };
  const onExpiryChanged = (e: React.FormEvent<HTMLInputElement>) => {
    const selectedExpiryOption = e.currentTarget.value;
    if (selectedExpiryOption === 'never') {
      setExpiryDays(-2);
      setSelectedExpiry('never');
    } else if (selectedExpiryOption === 'now') {
      setExpiryDays(-1);
      setSelectedExpiry('now');
    } else {
      setExpiryDays(0);
      setSelectedExpiry('day');
    }
  };
  return (
    <React.Fragment>
      <div className={Styles.expireySetContent}>
        <div className={Styles.editicon}>
          <i className="icon mbc-icon edit small " />
        </div>
        <h3> Edit Expiration Date </h3>
        {/* <p>
          Lorem ipsum dolor sit amet, consetetur <br /> sadipscing elitr, sed diam nonumy eirmod tempor invidunt.
        </p> */}
        <div className={Styles.setExpirycaption}>
          <div className={Styles.setExpiryDetails}>
            <div className={Styles.caption}>User Id</div>
            <div className={Styles.captionValues}>{props.apiItemToSetExpiry.createdBy}</div>
          </div>
          <div className={Styles.setExpiryDetails}>
            <div className={Styles.caption}>App Id</div>
            <div className={Styles.captionValues}>
              {props.apiItemToSetExpiry.appId}
              &nbsp;
              <i
                className={Styles.cpyStyle + ' icon mbc-icon copy'}
                onClick={copyAppId(props.apiItemToSetExpiry.appId)}
                tooltip-data="Copy"
              />
            </div>
          </div>
          <div className={Styles.setExpiryDetails}>
            <div className={Styles.caption}>Application Name</div>
            <div className={classNames(Styles.caption, Styles.breakWord)}>{props.apiItemToSetExpiry.appName}</div>
          </div>
          <div className={Styles.setExpiryDetails}>
            <div className={Styles.caption}>Description</div>
            <div className={classNames(Styles.caption, Styles.breakWord)}>{props.apiItemToSetExpiry.description}</div>
          </div>
          <div className={Styles.setExpiryDetailsInput}>
            <div className={Styles.caption}>API key</div>
            <div className={Styles.captionApiKey}>
              {showApiKey ? (
                <div className={Styles.apiKey}>{props.apiItemToSetExpiry.apiKey}</div>
              ) : (
                <div className={Styles.appKeyHidden}>
                  &bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;
                  &bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;
                </div>
              )}
              <div className={Styles.appKeyHiddenIcon}>
                {showApiKey ? (
                  <i
                    className={Styles.showAppId + ' icon mbc-icon visibility-hide'}
                    onClick={hideApiKey}
                    tooltip-data="Hide"
                  />
                ) : (
                  <i
                    className={Styles.showAppId + ' icon mbc-icon visibility-show ' + Styles.visiblityshow}
                    onClick={showApiKeyItem}
                    tooltip-data="Show"
                  />
                )}
                &nbsp;
                <i
                  className={Styles.cpyStyle + ' icon mbc-icon copy'}
                  onClick={copyApiKey(props.apiItemToSetExpiry.apiKey)}
                  tooltip-data="Copy"
                />
              </div>
            </div>
          </div>
          <div className={Styles.setExpiryDetails}>
            <div className={Styles.caption}>Expires On</div>
            <div className={Styles.caption}>
              {!props.apiItemToSetExpiry.expireOn
                ? 'Never'
                : getDateTimeFromTimestamp(props.apiItemToSetExpiry.expireOn)}
            </div>
          </div>
        </div>
        <div className={Styles.setTimeduration}>
          <div className={Styles.radioBtnGrp}>
            <div className={Styles.radioBtn}>
              <label className="radio">
                <span className="wrapper">
                  <input
                    type="radio"
                    name={'expire'}
                    value={'never'}
                    onChange={onExpiryChanged}
                    checked={selectedExpiry === 'never' ? true : false}
                  />
                </span>
                <span className="label">Never</span>
              </label>
            </div>
            <div className={Styles.radioBtn}>
              <label className="radio">
                <span className="wrapper">
                  <input
                    type="radio"
                    name={'expire'}
                    value={'now'}
                    onChange={onExpiryChanged}
                    checked={selectedExpiry === 'now' ? true : false}
                  />
                </span>
                <span className="label">Now</span>
              </label>
            </div>
            <div className={Styles.radioBtn}>
              <label className="radio">
                <span className="wrapper">
                  <input
                    type="radio"
                    name={'expire'}
                    value={'day'}
                    onChange={onExpiryChanged}
                    checked={selectedExpiry === 'day' ? true : false}
                  />
                </span>
                <span className="label">Expire in</span> &nbsp;&nbsp;&nbsp;
                <input
                  type="text"
                  className="input-field"
                  required={true}
                  id="solutionNameInput"
                  maxLength={3}
                  placeholder="Type here"
                  autoComplete="off"
                  onChange={(event: React.FormEvent<HTMLInputElement>) => {
                    setExpiry(event, event.currentTarget.value);
                  }}
                  value={expiryDays > -1 ? expiryDays : ''}
                  disabled={selectedExpiry === 'day' ? false : true}
                />
              </label>
              <label>&nbsp;&nbsp; days</label>
            </div>
            {/* <div className={Styles.radioBtn}>
              <label className="radio">
                <span className="wrapper">
                  <input type="radio" name="expire" value="day" />
                </span>
                <span className="label">Expire On</span> &nbsp;&nbsp;&nbsp;
                <input
                  type="text"
                  className="input-field"
                  required={true}
                  id="solutionNameInput"
                  maxLength={200}
                  placeholder="Type here"
                  autoComplete="off"
                  // onChange={solutionNameGet}
                  // value={solutionName}
                />
              </label>
              <label>&nbsp;&nbsp; </label>
            </div> */}
          </div>
        </div>

        <p>
          API key will expire{' '}
          {selectedExpiry === 'day' && expiryDays > -2
            ? expiryDays === 0
              ? 'today'
              : 'on ' + getDateAfterSomeDays(expiryDays)
            : expiryDays > -2
            ? 'Immidiately'
            : 'Never'}{' '}
        </p>
        <div className={Styles.daysError}>
          <span className={classNames('error-message', daysError.length ? '' : 'hide')}>{daysError}</span> <br />
        </div>
        <button className={' btn btn-tertiary '} type="button" onClick={saveExpiry}>
          {' '}
          Save Expiration Date{' '}
        </button>
      </div>
    </React.Fragment>
  );
}
