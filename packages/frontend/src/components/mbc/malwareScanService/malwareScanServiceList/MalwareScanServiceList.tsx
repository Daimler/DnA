import cn from 'classnames';
import React, { useEffect, useState } from 'react';
// @ts-ignore
import Notification from '../../../../assets/modules/uilab/js/src/notification';
import { ISubsriptionAdminList } from '../../../../globals/types';
import { history } from '../../../../router/History';
import Styles from '../MalwareScanService.scss';
// @ts-ignore
import ProgressIndicator from '../../../../assets/modules/uilab/js/src/progress-indicator';
// @ts-ignore
import Tooltip from '../../../../assets/modules/uilab/js/src/tooltip';
import {
  getDateFromTimestamp,
  getDateDifferenceFromTodayUsingGetDate,
  getDateTimeFromTimestamp
} from '../../../../services/utils';
const classNames = cn.bind(Styles);
let isTouch = false;

export interface IMalarescanListProps {
  item: ISubsriptionAdminList;
  key: string;
  refreshApiKey: (action: boolean, keyId: string, appId: string) => void;
  keyRefreshed: string;
  keyRefreshedId: string;
  deleteCurrentKey: (keyId: string) => void;
  showCurrentApiKey: (keyId: string) => void;
  showApiKey: string;
  hideCurrentApiKey: (apiKey: string) => void;
  openProvisionModal?: (appDetails: any) => void;
}

const MalwareScanServiceList = (props: IMalarescanListProps) => {
  Tooltip.defaultSetup();
  const item = props.item;

  const [showContextMenu, setShowContextMenu] = useState<boolean>(false);
  const [showLocationsContextMenu, setShowLocationsContextMenu] = useState<boolean>(false);
  const [contextMenuOffsetTop, setContextMenuOffsetTop] = useState<number>(0);
  const [contextMenuOffsetLeft, setContextMenuOffsetLeft] = useState<number>(0);

  const showCurrentApiKey = (keyId: string) => {
    return () => {
      props.showCurrentApiKey(keyId);
    };
  };

  const hideCurrentApiKey = () => {
    props.hideCurrentApiKey('');
  };
  const copyApiKey = (apikey: string) => {
    return () => {
      navigator.clipboard.writeText('');
      navigator.clipboard.writeText(apikey).then(() => {
        Notification.show('Copied to Clipboard');
      });
    };
  };
  const copyAppId = (apikey: string) => {
    return () => {
      navigator.clipboard.writeText(apikey).then(() => {
        Notification.show('Copied to Clipboard');
      });
    };
  };
  const refreshApiKey = (keyId: string, appId: string) => {
    return () => {
      props.refreshApiKey(true, keyId, appId);
    };
  };

  const deleteCurrentKey = (keyId: string) => {
    return () => {
      props.deleteCurrentKey(keyId);
    };
  };

  const handleContextMenuOutside = (event: MouseEvent | TouchEvent) => {
    if (event.type === 'touchend') {
      isTouch = true;
    }

    // Click event has been simulated by touchscreen browser.
    if (event.type === 'click' && isTouch === true) {
      return;
    }

    const target = event.target as Element;
    const elemClasses = target.classList;
    const cardDivElement = document.querySelector('#card-' + props.item.id);
    const contextMenuWrapper = cardDivElement?.querySelector('.contextMenuWrapper');
    const locationContextMenuWrapper = cardDivElement?.querySelector('.contextMenuWrapper');

    if (
      cardDivElement &&
      !target.classList.contains('trigger') &&
      !target.classList.contains('context') &&
      !target.classList.contains('contextList') &&
      !target.classList.contains('contextListItem') &&
      contextMenuWrapper !== null &&
      contextMenuWrapper.contains(target) === false &&
      (showContextMenu || showLocationsContextMenu)
    ) {
      setShowContextMenu(false);
      setShowLocationsContextMenu(false);
    } else if (cardDivElement.contains(target) === false) {
      setShowContextMenu(false);
      setShowLocationsContextMenu(false);
    }

    if (!contextMenuWrapper?.contains(target)) {
      setShowContextMenu(false);
    }

    if (!locationContextMenuWrapper?.contains(target)) {
      setShowLocationsContextMenu(false);
    }

    if (
      (showContextMenu || showLocationsContextMenu) &&
      (elemClasses.contains('contextList') ||
        elemClasses.contains('contextListItem') ||
        elemClasses.contains('contextMenuWrapper') ||
        elemClasses.contains('locationsText'))
    ) {
      event.stopPropagation();
    }
  };

  useEffect(() => {
    Tooltip.defaultSetup();
    document.addEventListener('touchend', handleContextMenuOutside, true);
    document.addEventListener('click', handleContextMenuOutside, true);
  }, []);

  useEffect(() => {
    return () => {
      document.removeEventListener('touchend', handleContextMenuOutside, true);
      document.removeEventListener('click', handleContextMenuOutside, true);
    };
  }, []);

  const toggleContextMenu = (e: React.FormEvent<HTMLSpanElement>) => {
    e.stopPropagation();
    setContextMenuOffsetTop(e.currentTarget.offsetTop - 10);
    setContextMenuOffsetLeft(e.currentTarget.offsetLeft - 200);
    setShowLocationsContextMenu(false);
    setShowContextMenu(!showContextMenu);
  };

  const onProvisionBtnClick = (e: React.FormEvent<HTMLElement>) => {
    props.openProvisionModal(item);
    e.stopPropagation();
  };

  const goToSolution = (solutionId: string) => {
    history.push('/summary/' + solutionId);
  };

  const showRefreshAPIItem = (expireOn: any) => {
    const now = new Date().getTime();
    const expirationDate = new Date(expireOn).getTime();
    if (expireOn) {
      if (expirationDate >= now) {
        return true;
      } else {
        return false;
      }
    } else {
      return true;
    }
  };

  return (
    <React.Fragment>
      <tr className="data-row" key={item.id}>
        <td className="wrap-text">
          <p>{item.appName}</p>
        </td>
        <td className="wrap-text">
          <p>{item.description}</p>
        </td>
        <td className={Styles.appId}>
          <div className={Styles.appIdDiv}>
            {item.appId} &nbsp;
            <i
              tooltip-data="Copy"
              className={Styles.cpyStyle + ' icon mbc-icon copy'}
              onClick={copyAppId(item.appId)}
            />
          </div>
        </td>
        <td className={Styles.appId}>
          <div className={Styles.appIdParentDiv}>
            <div className={Styles.refreshedKey}>
              {item.id === props.showApiKey ? (
                <React.Fragment>
                  {props.keyRefreshed != '' && item.id === props.keyRefreshedId ? (
                    props.keyRefreshed
                  ) : (
                    <React.Fragment>{item.apiKey}</React.Fragment>
                  )}
                </React.Fragment>
              ) : (
                <React.Fragment>
                  &bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;
                </React.Fragment>
              )}
            </div>
            <div className={Styles.refreshedKeyIcon}>
              {item.id === props.showApiKey ? (
                <React.Fragment>
                  <i
                    className={Styles.showAppId + ' icon mbc-icon visibility-hide'}
                    onClick={hideCurrentApiKey}
                    tooltip-data="Hide"
                  />
                </React.Fragment>
              ) : (
                <React.Fragment>
                  <i
                    className={Styles.showAppId + ' icon mbc-icon visibility-show ' + Styles.visiblityshow}
                    onClick={showCurrentApiKey(item.id)}
                    tooltip-data="Show"
                  />
                </React.Fragment>
              )}
              <i
                className={Styles.cpyStyle + ' icon mbc-icon copy'}
                onClick={copyApiKey(
                  props.keyRefreshed != '' && item.id === props.keyRefreshedId ? props.keyRefreshed : item.apiKey,
                )}
                tooltip-data="Copy"
              />
            </div>
          </div>
          
          <div className={Styles.malwareUsage}>
            <div className={Styles.expireOn}>
              <span className={Styles.metaLabel}>Expire On: </span>
              <span className={Styles.expireOnValue}>{!item.expireOn ? 'Never' : getDateTimeFromTimestamp(item.expireOn)}</span>
            </div>
            <div className={Styles.lastUsed}>
              <span className={Styles.metaLabel}>Last Used: </span>
              <span className={Styles.lastUsedOnValue}>
                {item.lastUsedOn
                  ? getDateDifferenceFromTodayUsingGetDate(getDateFromTimestamp(item.lastUsedOn)) === 0
                    ? 'Today'
                    : getDateDifferenceFromTodayUsingGetDate(getDateFromTimestamp(item.lastUsedOn)) + ' Days ago'
                  : 'NA'}
              </span>
            </div>
            <div className={Styles.usageCount}>
              <span className={Styles.metaLabel}>Usage count: </span> 
              <span className={Styles.metaValue}>{item.usageCount == null ? 0 : item.usageCount}</span>
            </div>
          </div>
        </td>
        <td id={'card-' + item.id} key={item.id} className={Styles.actionMenus}>
          <div className={classNames(Styles.contextMenu, showContextMenu ? Styles.open : '')}>
            <span
              tooltip-data="More Action"
              onClick={toggleContextMenu}
              className={classNames('trigger', Styles.contextMenuTrigger)}
            >
              <i className="icon mbc-icon listItem context" />
            </span>
            <div
              style={{
                top: contextMenuOffsetTop + 'px',
                left: contextMenuOffsetLeft + 'px',
              }}
              className={classNames('contextMenuWrapper', showContextMenu ? Styles.showMenu : 'hide')}
            >
              <ul className="contextList">
                {showRefreshAPIItem(item.expireOn) ? (
                  <li className="contextListItem" onClick={refreshApiKey(item.id, item.appId)}>
                    <span>Refresh Api Key</span>
                  </li>
                ) : (
                  ''
                )}

                {item.solutionId ? (
                  <li
                    className="contextListItem"
                    onClick={(event: React.FormEvent<HTMLSpanElement>) => goToSolution(item.solutionId)}
                  >
                    <span>Go to Solution</span>
                  </li>
                ) : (
                  <li className="contextListItem" onClick={onProvisionBtnClick}>
                    <span>Provision to Solution</span>
                  </li>
                )}
                <li className="contextListItem" onClick={deleteCurrentKey(item.id)}>
                  <span>Delete</span>
                </li>
              </ul>
            </div>
          </div>
        </td>
      </tr>
    </React.Fragment>
  );
};

export default MalwareScanServiceList;
