import cn from 'classnames';
import React, { useEffect, useState } from 'react';
// @ts-ignore
import Notification from '../../../assets/modules/uilab/js/src/notification';
import Styles from './MalwareScanService.scss';
// @ts-ignore
import ProgressIndicator from '../../../assets/modules/uilab/js/src/progress-indicator';

const classNames = cn.bind(Styles);
import Modal from 'components/formElements/modal/Modal';
import NewApiKeyModal from './newApiKeyModal/NewApiKeyModal';
import ApiKeyDeleteModal from './apiKeyDeleteModal/ApiKeyDeleteModal';
import MalwareScanServiceList from './malwareScanServiceList/MalwareScanServiceList';

import { MalwarescanApiClient } from '../../../services/MalwarescanApiClient';
import ConfirmModal from 'components/formElements/modal/confirmModal/ConfirmModal';
import { history } from '../../../router/History';

// @ts-ignore
import Tooltip from '../../../assets/modules/uilab/js/src/tooltip';
import InfoModal from 'components/formElements/modal/infoModal/InfoModal';
import Caption from '../shared/caption/Caption';
import { ProvisionSource } from 'globals/Enums';
import Provisionsolution from '../provisionsolution/Provisionsolution';
import Pagination from '../pagination/Pagination';
import { MALWARE_SCAN_SERVICE_ONE_API_LINK, SESSION_STORAGE_KEYS } from 'globals/constants';
import { getQueryParameterByName } from '../../../services/Query';
import { Envs } from 'globals/Envs';

let isTouch = false;

const MalwareScanService = () => {
  Tooltip.defaultSetup();
  const [malwarePopup, setMalwarePopup] = useState(false);
  const [newSubcription, setNewSubcription] = useState('');
  const [malwareDeletePopup, setMalwareDeletePopup] = useState(false);
  const [apiKeyRefreshPopup, setApiKeyRefreshPopup] = useState(false);
  const [currentSubscriId, setCurrentSubscriId] = useState('');
  const [currentSubscriIdDeleted, setcurrentSubscriIdDeleted] = useState('');
  const [showApiKey, setShowApiKey] = useState('');
  const [malwareScanApiKeysList, setMalwareScanApiKeysList] = useState([]);
  const [keyRefreshed, SetKeyRefreshed] = useState('');
  const [keyRefreshedId, SetKeyRefreshedId] = useState('');
  const [refreshAppId, setRefreshAppId] = useState('');
  const [itemId, setItemId] = useState('');
  const [info, setInfo] = useState(false);

  const [showContextMenu, setShowContextMenu] = useState<boolean>(false);
  const [showLocationsContextMenu, setShowLocationsContextMenu] = useState<boolean>(false);
  const [showProvisionModal, setShowProvisionModal] = useState<boolean>(false);
  const [appIdTobeProvisioned, setAppIdTobeProvisioned] = useState('');
  const [selectedSubscription, setSelectedSubscription] = useState();
  const [totalNumberOfPages, setTotalNumberOfPages] = useState(1);
  const [currentPageNumber, setCurrentPageNumber] = useState(1);
  const [currentPageOffset, setCurrentPageOffset] = useState(0);
  const [maxItemsPerPage, setMaxItemsPerPage] = useState(
    parseInt(sessionStorage.getItem(SESSION_STORAGE_KEYS.PAGINATION_MAX_ITEMS_PER_PAGE), 10) || 15,
  );

  const addNewAPIkey = () => {
    setMalwarePopup(true);
  };
  const malwarePopupClose = () => {
    setMalwarePopup(false);
    setMalwareDeletePopup(false);
  };
  const addSubriptionSuccess = (newSub: string) => {
    setMalwarePopup(false);
    setNewSubcription(newSub);
    Notification.show('New API Key Generated Successfully!');
    getMalwarescanSubscriptionList();
  };
  const deleteCurrentKey = (keyId: string) => {
    setCurrentSubscriId(keyId);
    setMalwareDeletePopup(true);
  };
  const subscriptionDeletesucces = (id: string) => {
    ProgressIndicator.show();
    MalwarescanApiClient.deleteCurrentMalwareservice(id).then(() => {
      setMalwareDeletePopup(false);
      setcurrentSubscriIdDeleted(id);
      ProgressIndicator.hide();
      Notification.show('Deleted Successfully!');
      getMalwarescanSubscriptionList();
    });
  };
  const showCurrentApiKey = (keyId: string) => {
    setShowApiKey(keyId);
  };
  const onInfoModalShow = () => {
    setInfo(true);
  };
  const onInfoModalCancel = () => {
    setInfo(false);
  };
  const hideCurrentApiKey = () => {
    setShowApiKey('');
  };
  const refreshApiKey = (action: boolean, keyId: string, appId: string) => {
    setApiKeyRefreshPopup(action);
    setRefreshAppId(appId);
    setItemId(keyId);
  };
  const refreshApiKeyCancel = () => {
    setApiKeyRefreshPopup(false);
  };
  const refreshApiKeyConfirm = () => {
    ProgressIndicator.show();
    MalwarescanApiClient.getRefreshApiKey(refreshAppId)
      .then((response) => {
        SetKeyRefreshed(response.data.apiKey);
        SetKeyRefreshedId(response.data.id);
        setShowApiKey(itemId);
        setApiKeyRefreshPopup(false);
        ProgressIndicator.hide();
      })
      .catch((err) => err);
  };

  const handleContextMenuOutside = (event: MouseEvent | TouchEvent) => {
    if (event.type === 'touchend') {
      isTouch = true;
    }

    // Click event has been simulated by touchscreen browser.
    if (event.type === 'click' && isTouch === true) {
      return;
    }

    const target = event.target as Element;
    const elemClasses = target.classList;
    const cardDivElement = document.querySelector('#card-');
    const contextMenuWrapper = cardDivElement?.querySelector('.contextMenuWrapper');
    const locationContextMenuWrapper = cardDivElement?.querySelector('.contextMenuWrapper');

    if (
      cardDivElement &&
      !target.classList.contains('trigger') &&
      !target.classList.contains('context') &&
      !target.classList.contains('contextList') &&
      !target.classList.contains('contextListItem') &&
      contextMenuWrapper !== null &&
      contextMenuWrapper.contains(target) === false &&
      (showContextMenu || showLocationsContextMenu)
    ) {
      setShowContextMenu(false);
      setShowLocationsContextMenu(false);
    } else if (cardDivElement?.contains(target) === false) {
      setShowContextMenu(false);
      setShowLocationsContextMenu(false);
    }

    if (!contextMenuWrapper?.contains(target)) {
      setShowContextMenu(false);
    }

    if (!locationContextMenuWrapper?.contains(target)) {
      setShowLocationsContextMenu(false);
    }

    if (
      (showContextMenu || showLocationsContextMenu) &&
      (elemClasses.contains('contextList') ||
        elemClasses.contains('contextListItem') ||
        elemClasses.contains('contextMenuWrapper') ||
        elemClasses.contains('locationsText'))
    ) {
      event.stopPropagation();
    }
  };

  useEffect(() => {
    document.addEventListener('touchend', handleContextMenuOutside, true);
    document.addEventListener('click', handleContextMenuOutside, true);
  }, []);

  useEffect(() => {
    return () => {
      document.removeEventListener('touchend', handleContextMenuOutside, true);
      document.removeEventListener('click', handleContextMenuOutside, true);
    };
  }, []);

  useEffect(() => {
    Tooltip.defaultSetup();
    const pageNumberOnQuery = getQueryParameterByName('page');
    const currentPageNumberInit = pageNumberOnQuery ? parseInt(getQueryParameterByName('page'), 10) : 1;
    const currentPageOffsetInit = pageNumberOnQuery ? (currentPageNumber - 1) * maxItemsPerPage : 0;
    setCurrentPageNumber(currentPageNumberInit);
    setCurrentPageOffset(currentPageOffsetInit);
  }, [newSubcription, currentSubscriIdDeleted]);

  useEffect(() => {
    getMalwarescanSubscriptionList();
  }, [currentPageOffset, maxItemsPerPage]);

  const getMalwarescanSubscriptionList = () => {
    ProgressIndicator.show();
    MalwarescanApiClient.getMalwarescanSubscriListWithPagination(maxItemsPerPage, currentPageOffset)
      .then((response) => {
        const totalNumberOfPagesInner = Math.ceil(response.totalCount / maxItemsPerPage);
        setMalwareScanApiKeysList(response.data);
        setCurrentPageNumber(currentPageNumber > totalNumberOfPagesInner ? 1 : currentPageNumber);
        setTotalNumberOfPages(totalNumberOfPagesInner);
        ProgressIndicator.hide();
        history.replace({
          search: `?page=${currentPageNumber}`,
        });
      })
      .catch((err) => err);
  };

  const provisionedSolutionId = (solutionId: string) => {
    setShowProvisionModal(false);
    getMalwarescanSubscriptionList();
  };

  const openProvisionModal = (appDetails: any) => {
    setShowProvisionModal(true);
    setAppIdTobeProvisioned(appDetails.appId);
    setSelectedSubscription(appDetails);
  };

  const onProvisionModalCancel = () => {
    setShowProvisionModal(false);
  };

  const refreshApiKeyPopup = (
    <div id="refreshApiKeyPopup">
      <h6>This will invalidate your existing API key and would generate a new key.</h6>
      <div className={Styles.modalContent}>Are you sure to refresh your API key?</div>
    </div>
  );
  const contentForInfo = (
    <div className={Styles.infoPopup}>
      <div className={Styles.modalContent}>
        <p>
          Using the Malware scan service, you can scan for malware in your files through an API. To use this
          service,&nbsp;
          {Envs.ENABLE_MALWARE_SCAN_ONEAPI_INFO
            ? `you can subscribe either through the ${Envs.DNA_APPNAME_HEADER} using the 'Generate API Key' button or through the OneAPI
            Platform.`
            : "you can subscribe to this service using the 'Generate API Key' button."}
        </p>

        <br />
        <p>
          Malware Scan service ensures that files are scanned for any malware before they are persisted in their
          respective storage systems.
        </p>
        <br />
        <p>
          <a target="_blank" href={Envs.MALWARE_SCAN_SWAGGER_UI_URL} rel="noreferrer">
            API Documentation
          </a>
        </p>
      </div>
    </div>
  );

  const onPaginationPreviousClick = () => {
    const currentPageNum = currentPageNumber - 1;
    const currentPageOffsetInner = (currentPageNum - 1) * maxItemsPerPage;
    setCurrentPageNumber(currentPageNum);
    setCurrentPageOffset(currentPageOffsetInner);
  };

  const onPaginationNextClick = async () => {
    let currentPageNum = currentPageNumber;
    const currentPageOffsetInner = currentPageNum * maxItemsPerPage;
    setCurrentPageOffset(currentPageOffsetInner);
    currentPageNum = currentPageNum + 1;
    setCurrentPageNumber(currentPageNum);
  };

  const onViewByPageNum = (pageNum: number) => {
    setCurrentPageNumber(1);
    setCurrentPageOffset(0);
    setMaxItemsPerPage(pageNum);
  };

  return (
    <React.Fragment>
      <div className={classNames(Styles.mainPanel)}>
        <div className={Styles.wrapper}>
          <Caption title="Malware Scan Service" />
        </div>

        {malwareScanApiKeysList === null || malwareScanApiKeysList === undefined ? (
          ''
        ) : (
          <div className={Styles.addNewSubscrHeader}>
            <div className={Styles.appHeaderDetails}>
              <button className={Styles.addNewSubcibtn + ' btn btn-primary'} onClick={addNewAPIkey} type="button">
                <i className="icon mbc-icon plus" />
                <span>Generate new API Key</span>
              </button>
              {Envs.ENABLE_MALWARE_SCAN_ONEAPI_INFO && (
                <button className={Styles.addNewSubcibtn + ' btn btn-primary'} type="button">
                  <i className="icon mbc-icon new-tab" />
                  <span>
                    <a target="_blank" href={MALWARE_SCAN_SERVICE_ONE_API_LINK} rel="noreferrer">
                      Subscribe through OneAPI
                    </a>
                  </span>
                </button>
              )}
              <i
                tooltip-data="Info"
                className={Styles.iconsmd + ' icon mbc-icon info iconsmd'}
                onClick={onInfoModalShow}
              />
            </div>
          </div>
        )}
        <div className={Styles.content}>
          <div className={Styles.NoSubscription}>
            <div className={Styles.addApiKeys}>
              {malwareScanApiKeysList === null || malwareScanApiKeysList === undefined ? (
                <React.Fragment>
                  <p>
                    Malware Scan service ensures that files are scanned for any malware before they are persisted in
                    their respective storage systems.
                  </p>
                  <i
                    tooltip-data="Info"
                    className={Styles.iconsmd + ' icon mbc-icon info iconsmd'}
                    onClick={onInfoModalShow}
                  />
                </React.Fragment>
              ) : (
                ''
              )}
            </div>
            <div className={Styles.subsriContent}>
              {malwareScanApiKeysList === null || malwareScanApiKeysList === undefined ? (
                <div className={Styles.malwaresubscriptionListEmpty}>
                  <React.Fragment>
                    <button
                      className={Styles.addNewSubcibtn + ' btn btn-tertiary'}
                      onClick={addNewAPIkey}
                      type="button"
                    >
                      Generate New API Key
                    </button>
                    {Envs.ENABLE_MALWARE_SCAN_ONEAPI_INFO && (
                      <span>
                        Subscribe through{' '}
                        <a target="_blank" href={MALWARE_SCAN_SERVICE_ONE_API_LINK} rel="noreferrer">
                          oneAPI
                        </a>
                      </span>
                    )}
                  </React.Fragment>
                </div>
              ) : (
                <React.Fragment>
                  <div className={Styles.malwaresubscriptionList}>
                    <table className={'ul-table'}>
                      <thead>
                        <tr className="header-row">
                          <th>
                            <label className="sortable-column-header">Name </label>
                          </th>
                          <th>
                            <label className="sortable-column-header">Description </label>
                          </th>
                          <th>
                            <label className="sortable-column-header">Application Id</label>
                          </th>
                          <th>
                            <label className="sortable-column-header">API Key</label>
                          </th>
                          <th>
                            <label className="sortable-column-header">Action</label>
                          </th>
                        </tr>
                      </thead>
                      <tbody>
                        {malwareScanApiKeysList?.map((item, index) => {
                          return (
                            <MalwareScanServiceList
                              item={item}
                              key={item.id}
                              refreshApiKey={refreshApiKey}
                              keyRefreshed={keyRefreshed}
                              keyRefreshedId={keyRefreshedId}
                              deleteCurrentKey={deleteCurrentKey}
                              showCurrentApiKey={showCurrentApiKey}
                              showApiKey={showApiKey}
                              hideCurrentApiKey={hideCurrentApiKey}
                              openProvisionModal={openProvisionModal}
                            />
                          );
                        })}
                      </tbody>
                    </table>
                  </div>
                  {malwareScanApiKeysList?.length ? (
                    <Pagination
                      totalPages={totalNumberOfPages}
                      pageNumber={currentPageNumber}
                      onPreviousClick={onPaginationPreviousClick}
                      onNextClick={onPaginationNextClick}
                      onViewByNumbers={onViewByPageNum}
                      displayByPage={true}
                    />
                  ) : (
                    ''
                  )}
                </React.Fragment>
              )}
            </div>
          </div>
        </div>
      </div>
      {malwarePopup && (
        <Modal
          title={'Generate New API Key'}
          showAcceptButton={false}
          showCancelButton={false}
          modalWidth={'60%'}
          buttonAlignment="right"
          show={malwarePopup}
          content={<NewApiKeyModal addSubriptionSuccess={addSubriptionSuccess} />}
          scrollableContent={false}
          onCancel={malwarePopupClose}
        />
      )}
      {malwareDeletePopup && (
        <ConfirmModal
          title="Are you sure to delete your API key?"
          acceptButtonTitle="Delete"
          cancelButtonTitle="Cancel"
          showAcceptButton={false}
          showCancelButton={false}
          show={malwareDeletePopup}
          content={
            <ApiKeyDeleteModal
              subscriptionDeletesucces={subscriptionDeletesucces}
              malwarePopupClose={malwarePopupClose}
              subscrId={currentSubscriId}
            />
          }
          onCancel={malwarePopupClose}
        />
      )}
      {apiKeyRefreshPopup && (
        <ConfirmModal
          title=""
          acceptButtonTitle="Yes"
          cancelButtonTitle="No"
          showAcceptButton={true}
          showCancelButton={true}
          show={apiKeyRefreshPopup}
          content={refreshApiKeyPopup}
          onCancel={refreshApiKeyCancel}
          onAccept={refreshApiKeyConfirm}
        />
      )}
      {info && (
        <InfoModal
          title={'About Malware Scan Service'}
          modalWidth={'35vw'}
          show={info}
          content={contentForInfo}
          onCancel={onInfoModalCancel}
        />
      )}
      {showProvisionModal && (
        <Modal
          title={''}
          showAcceptButton={false}
          showCancelButton={false}
          modalWidth={'80%'}
          buttonAlignment="right"
          show={showProvisionModal}
          content={
            <Provisionsolution
              projectToBeProvisioned={appIdTobeProvisioned}
              provisionedSolutionId={provisionedSolutionId}
              provisionFrom={ProvisionSource.MALWARESCANSERVICE}
              projectToBeProvisionedObject={selectedSubscription}
            />
          }
          scrollableContent={false}
          onCancel={onProvisionModalCancel}
        />
      )}
    </React.Fragment>
  );
};

export default MalwareScanService;
