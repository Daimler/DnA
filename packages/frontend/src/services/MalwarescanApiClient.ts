import { Envs, } from '../globals/Envs';
import { HTTP_METHOD } from '../globals/constants';
import {ISubsription, ISubsriptionExpiryObjectData} from '../globals/types'
import { ApiClient } from './ApiClient';

const baseUrl = Envs.MALWARESCAN_API_BASEURL
  ? Envs.MALWARESCAN_API_BASEURL
  : `http://${window.location.hostname}:7171/api`;
const getUrl = (endpoint: string) => {
  return `${baseUrl}/${endpoint}`;
};


export class MalwarescanApiClient {
  public static get(endpoint: string) {
    return ApiClient.fetch(getUrl(endpoint), HTTP_METHOD.GET);
  }
  public static post(endpoint: string, body?: any) {
    return ApiClient.fetch(getUrl(endpoint), HTTP_METHOD.POST, body);
  }
  public static put(endpoint: string, body?: any) {
    return ApiClient.fetch(getUrl(endpoint), HTTP_METHOD.PUT, body);
  }
  public static putWithFormData(endpoint: string, formData: FormData) {
    return ApiClient.fetchWithFormData(getUrl(endpoint), HTTP_METHOD.PUT, formData);
  }
  public static patch(endpoint: string, body?: any) {
    return ApiClient.fetch(getUrl(endpoint), HTTP_METHOD.PATCH, body);
  }
  public static delete(endpoint: string, body?: any) {
    return ApiClient.fetch(getUrl(endpoint), HTTP_METHOD.DELETE, body);
  }


  public static generateNewApiKey(data: ISubsription) {
    return this.post('subscription', data);
  }
  public static getMalwarescanSubscriList() {
    return this.get('subscription/');
  }
  public static getMalwarescanSubscriListWithPagination(limit: number, offset: number) {
    return this.get('subscription?limit=' + limit + '&offset=' + offset);
  }
  public static getMalwarescanSubscriListAdmin(
    limit: number,
    offset: number,
    sortBy: string,
    sortOrder: string,
    searchTerm: string,
  ) {
    let paramToPass =
      'subscription?admin=true&limit=' + limit + '&offset=' + offset + '&sortBy=' + sortBy + '&sortOrder=' + sortOrder;
    if (searchTerm == null) {
      paramToPass += '&searchTerm=' + '';
    } else {
      paramToPass += '&searchTerm=' + searchTerm;
    }
    return this.get(paramToPass);
  }
  public static getRefreshApiKey(appId: String) {
    return this.get('subscription/' + appId + '/refresh/');
  }
  public static deleteCurrentMalwareservice(id: String) {
    return this.delete('subscription/' + id);
  }
  public static saveExpiry(data: ISubsriptionExpiryObjectData) {
    return this.put('subscription', data);
  }
  
}
